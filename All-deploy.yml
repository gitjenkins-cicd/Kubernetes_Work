apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T10:20:51Z"
    generateName: batch-job-
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:20:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.19"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-03T10:22:57Z"
    name: batch-job-2k7jx
    namespace: default
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: batch-job
      uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    resourceVersion: "488134"
    selfLink: /api/v1/namespaces/default/pods/batch-job-2k7jx
    uid: 2d578612-eb4e-4b9f-a3ed-79aa70b67d6c
  spec:
    containers:
    - image: luksa/batch-job
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:51Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:22:57Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:22:57Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://51e68b59fa859223bd5329203c92a1671342424b0ba09c71c473b147b6654b1b
      image: docker.io/luksa/batch-job:latest
      imageID: docker-pullable://docker.io/luksa/batch-job@sha256:572a3eba91f3349063f7eb00c03cdb5e1b8f50ca88b8cdf30df8ae218564055b
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://51e68b59fa859223bd5329203c92a1671342424b0ba09c71c473b147b6654b1b
          exitCode: 0
          finishedAt: "2020-05-03T10:22:57Z"
          reason: Completed
          startedAt: "2020-05-03T10:20:57Z"
    hostIP: 192.168.10.161
    phase: Succeeded
    podIP: 172.17.0.19
    podIPs:
    - ip: 172.17.0.19
    qosClass: BestEffort
    startTime: "2020-05-03T10:20:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T10:22:57Z"
    generateName: batch-job-
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:22:57Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.19"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-03T10:25:05Z"
    name: batch-job-4qnn6
    namespace: default
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: batch-job
      uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    resourceVersion: "488449"
    selfLink: /api/v1/namespaces/default/pods/batch-job-4qnn6
    uid: f0f23c82-5062-4456-9bdf-056fec2c4e10
  spec:
    containers:
    - image: luksa/batch-job
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:22:58Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:25:05Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:25:05Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:22:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://cc69c85ffbd7c20781ede4843374e105bd72c45127dbd80bb33d3634d1df8a3e
      image: docker.io/luksa/batch-job:latest
      imageID: docker-pullable://docker.io/luksa/batch-job@sha256:572a3eba91f3349063f7eb00c03cdb5e1b8f50ca88b8cdf30df8ae218564055b
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://cc69c85ffbd7c20781ede4843374e105bd72c45127dbd80bb33d3634d1df8a3e
          exitCode: 0
          finishedAt: "2020-05-03T10:25:04Z"
          reason: Completed
          startedAt: "2020-05-03T10:23:04Z"
    hostIP: 192.168.10.161
    phase: Succeeded
    podIP: 172.17.0.19
    podIPs:
    - ip: 172.17.0.19
    qosClass: BestEffort
    startTime: "2020-05-03T10:22:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T10:20:55Z"
    generateName: batch-job-
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:20:55Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.18"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-03T10:23:06Z"
    name: batch-job-dw87l
    namespace: default
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: batch-job
      uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    resourceVersion: "488164"
    selfLink: /api/v1/namespaces/default/pods/batch-job-dw87l
    uid: 3b0a631c-5e0d-4f3a-b1c1-3f1fec52a988
  spec:
    containers:
    - image: luksa/batch-job
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:55Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:23:06Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:23:06Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b52ae310c3689263b9ef01be67986773dbd4beb312e18f20b2e55416bf393d39
      image: docker.io/luksa/batch-job:latest
      imageID: docker-pullable://docker.io/luksa/batch-job@sha256:572a3eba91f3349063f7eb00c03cdb5e1b8f50ca88b8cdf30df8ae218564055b
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://b52ae310c3689263b9ef01be67986773dbd4beb312e18f20b2e55416bf393d39
          exitCode: 0
          finishedAt: "2020-05-03T10:23:06Z"
          reason: Completed
          startedAt: "2020-05-03T10:21:06Z"
    hostIP: 192.168.10.161
    phase: Succeeded
    podIP: 172.17.0.18
    podIPs:
    - ip: 172.17.0.18
    qosClass: BestEffort
    startTime: "2020-05-03T10:20:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T10:18:44Z"
    generateName: batch-job-
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:18:44Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.18"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-03T10:20:55Z"
    name: batch-job-fp8wz
    namespace: default
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: batch-job
      uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    resourceVersion: "487847"
    selfLink: /api/v1/namespaces/default/pods/batch-job-fp8wz
    uid: e6feb0b3-0e0a-4e4c-bfb5-597fed26f74b
  spec:
    containers:
    - image: luksa/batch-job
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:18:44Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:55Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:55Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:18:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0bf323c3512a3c75ae8cec2d060d190e58dc17c17d0f9347ff3e4e07a26ebb39
      image: docker.io/luksa/batch-job:latest
      imageID: docker-pullable://docker.io/luksa/batch-job@sha256:572a3eba91f3349063f7eb00c03cdb5e1b8f50ca88b8cdf30df8ae218564055b
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://0bf323c3512a3c75ae8cec2d060d190e58dc17c17d0f9347ff3e4e07a26ebb39
          exitCode: 0
          finishedAt: "2020-05-03T10:20:55Z"
          reason: Completed
          startedAt: "2020-05-03T10:18:55Z"
    hostIP: 192.168.10.161
    phase: Succeeded
    podIP: 172.17.0.18
    podIPs:
    - ip: 172.17.0.18
    qosClass: BestEffort
    startTime: "2020-05-03T10:18:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T10:18:44Z"
    generateName: batch-job-
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:18:44Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.19"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-03T10:20:51Z"
    name: batch-job-qb7qk
    namespace: default
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: batch-job
      uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    resourceVersion: "487830"
    selfLink: /api/v1/namespaces/default/pods/batch-job-qb7qk
    uid: 5d841bcc-f148-439f-8632-b3b7e9c3a499
  spec:
    containers:
    - image: luksa/batch-job
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:18:44Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:51Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:20:51Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T10:18:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bc2eba9e67afeb47f43277b825a2d17a76966801d28e2f73b8a0217a4e3c6f62
      image: docker.io/luksa/batch-job:latest
      imageID: docker-pullable://docker.io/luksa/batch-job@sha256:572a3eba91f3349063f7eb00c03cdb5e1b8f50ca88b8cdf30df8ae218564055b
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://bc2eba9e67afeb47f43277b825a2d17a76966801d28e2f73b8a0217a4e3c6f62
          exitCode: 0
          finishedAt: "2020-05-03T10:20:50Z"
          reason: Completed
          startedAt: "2020-05-03T10:18:50Z"
    hostIP: 192.168.10.161
    phase: Succeeded
    podIP: 172.17.0.19
    podIPs:
    - ip: 172.17.0.19
    qosClass: BestEffort
    startTime: "2020-05-03T10:18:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-08T10:22:59Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"html-generator"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/htdocs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"web-server"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/share/nginx/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"html"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-05-08T10:22:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.12"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:14Z"
    name: fortune
    namespace: default
    resourceVersion: "1140836"
    selfLink: /api/v1/namespaces/default/pods/fortune
    uid: 1b58cb8c-a6a5-406a-8d2f-d865f94f1dad
  spec:
    containers:
    - image: luksa/fortune
      imagePullPolicy: Always
      name: html-generator
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/htdocs
        name: html
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    - image: nginx:alpine
      imagePullPolicy: IfNotPresent
      name: web-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: html
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: html
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-08T10:22:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-08T10:22:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://85c075ae86f8b15aae04b4c8cdde076dfbb82578955cae5c6d2c37536cb9053f
      image: docker.io/luksa/fortune:latest
      imageID: docker-pullable://docker.io/luksa/fortune@sha256:814dd72ecc4b431560ca6ede8649fc4862c401ba5b6d37520e6672e0657deea9
      lastState:
        terminated:
          containerID: docker://ada04ce050094c7a884381e4f8fd2514660e8dfc8a17956c4bf80e1eab796d13
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:47:13Z"
      name: html-generator
      ready: true
      restartCount: 10
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:03Z"
    - containerID: docker://364115b7e265820b1da3d2551ce1431a192775ba2d644d45424e97742c602f44
      image: docker.io/nginx:alpine
      imageID: docker-pullable://docker.io/nginx@sha256:763e7f0188e378fef0c761854552c70bbd817555dc4de029681a2e972e25e30e
      lastState:
        terminated:
          containerID: docker://f08aa933d9cde425fb8b7d782f0d474cafcf94201e858c17eca28a0d05933112
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:47:14Z"
      name: web-server
      ready: true
      restartCount: 11
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:04Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.12
    podIPs:
    - ip: 172.17.0.12
    qosClass: BestEffort
    startTime: "2020-05-08T10:22:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-17T07:10:58Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"web-server"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/nginx/conf.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-05-17T07:10:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.30"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:13Z"
    name: fortune-configmap-volume
    namespace: default
    resourceVersion: "1140824"
    selfLink: /api/v1/namespaces/default/pods/fortune-configmap-volume
    uid: 309cb2be-979b-4a90-b74b-e87e6af0f784
  spec:
    containers:
    - image: nginx:alpine
      imagePullPolicy: IfNotPresent
      name: web-server
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/nginx/conf.d
        name: config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: fortune-confgimap
      name: config
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-17T07:10:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-17T07:10:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2a8fcfcf830d5648308bb26c7dcdbc63dd6afdb1099717030f8a00b40e978359
      image: docker.io/nginx:alpine
      imageID: docker-pullable://docker.io/nginx@sha256:763e7f0188e378fef0c761854552c70bbd817555dc4de029681a2e972e25e30e
      lastState:
        terminated:
          containerID: docker://ffb3d4b5557c85331806bbd9ec9ab52b6a290c822fdf5f3b5f9d33eb4213ad0e
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: web-server
      ready: true
      restartCount: 7
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:53Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.30
    podIPs:
    - ip: 172.17.0.30
    qosClass: BestEffort
    startTime: "2020-05-17T07:10:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-01T11:27:52Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"kubia"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-01T11:27:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T08:46:52Z"
    name: kubia-liveness
    namespace: default
    resourceVersion: "1165350"
    selfLink: /api/v1/namespaces/default/pods/kubia-liveness
    uid: da2f1afa-8856-4d38-945f-b1b4a4819abc
  spec:
    containers:
    - image: luksa/kubia-unhealthy
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kubia
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-01T11:27:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T08:46:52Z"
      message: 'containers with unready status: [kubia]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T08:46:52Z"
      message: 'containers with unready status: [kubia]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-01T11:27:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0da6c62b78e99a6a080425edc4093c4120fa7757bdad7022abddcf95069c7b07
      image: docker.io/luksa/kubia-unhealthy:latest
      imageID: docker-pullable://docker.io/luksa/kubia-unhealthy@sha256:5c746a42612be61209417d913030d97555cff0b8225092908c57634ad7c235f7
      lastState:
        terminated:
          containerID: docker://0da6c62b78e99a6a080425edc4093c4120fa7757bdad7022abddcf95069c7b07
          exitCode: 137
          finishedAt: "2020-06-11T08:46:52Z"
          reason: Error
          startedAt: "2020-06-11T08:45:07Z"
      name: kubia
      ready: false
      restartCount: 1301
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=kubia pod=kubia-liveness_default(da2f1afa-8856-4d38-945f-b1b4a4819abc)
          reason: CrashLoopBackOff
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.8
    podIPs:
    - ip: 172.17.0.8
    qosClass: BestEffort
    startTime: "2020-05-01T11:27:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-30T06:05:41Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"kubia"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-04-30T06:05:41Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:04Z"
    name: kubia-manual
    namespace: default
    resourceVersion: "1140648"
    selfLink: /api/v1/namespaces/default/pods/kubia-manual
    uid: 447ae67b-ce22-45e7-b00c-ecc5f8742082
  spec:
    containers:
    - image: luksa/kubia
      imagePullPolicy: Always
      name: kubia
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-30T06:05:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-30T06:05:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://37404b7f8ba7e83289803e512bc5fa6c2f28be09ecb93a1ec5914e41f14b1137
      image: docker.io/luksa/kubia:latest
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:3f28e304dc0f63dc30f273a4202096f0fa0d08510bd2ee7e1032ce600616de24
      lastState:
        terminated:
          containerID: docker://72bcd1b790f33f2c207e87cfb6db5d132cfc0ea8399d57069494a3942ab09171
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:51Z"
      name: kubia
      ready: true
      restartCount: 16
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:55Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.4
    podIPs:
    - ip: 172.17.0.4
    qosClass: BestEffort
    startTime: "2020-04-30T06:05:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-30T08:12:27Z"
    labels:
      creation_method: manual
      env: debug
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:creation_method: {}
            f:env: {}
        f:spec:
          f:containers:
            k:{"name":"kubia"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-04-30T08:29:30Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.14"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:13Z"
    name: kubia-manual-v2
    namespace: default
    resourceVersion: "1140829"
    selfLink: /api/v1/namespaces/default/pods/kubia-manual-v2
    uid: fbbb5dd1-aefc-4776-8965-423d021e4b75
  spec:
    containers:
    - image: luksa/kubia
      imagePullPolicy: Always
      name: kubia
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-30T08:12:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-30T08:12:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://71bfc7e15d90e55b621192605244411e3dcb2bb063b7e7727b672cb982ca6319
      image: docker.io/luksa/kubia:latest
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:3f28e304dc0f63dc30f273a4202096f0fa0d08510bd2ee7e1032ce600616de24
      lastState:
        terminated:
          containerID: docker://f677e1c95fa9ae13d797bb5953c71516d66b62d754228d3ab5afa6cb07b3cf6e
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:55Z"
      name: kubia
      ready: true
      restartCount: 16
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:06Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.14
    podIPs:
    - ip: 172.17.0.14
    qosClass: BestEffort
    startTime: "2020-04-30T08:12:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-22T15:56:51Z"
    generateName: kubia-v1-
    labels:
      app: kubiadeploy
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"98e41fc8-d058-425a-a315-98affabb956b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.25"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:09Z"
    name: kubia-v1-pvq8x
    namespace: default
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: kubia-v1
      uid: 98e41fc8-d058-425a-a315-98affabb956b
    resourceVersion: "1140763"
    selfLink: /api/v1/namespaces/default/pods/kubia-v1-pvq8x
    uid: eadc9073-7fde-450b-a59b-cb090924d60f
  spec:
    containers:
    - image: luksa/kubia:v1
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e8dbaf572fa3243b4d6cb476069c5e523bdb19659e94454248606d454b0b6c1c
      image: docker.io/luksa/kubia:v1
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:259e3d728621f001a629a5fe4b56020d0a14e239b0ea82727c1398f155c75a5d
      lastState:
        terminated:
          containerID: docker://0560e9d1fe729f435abf60f7270747784245895c2182ce280639cd8104375e25
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:41Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:53Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.25
    podIPs:
    - ip: 172.17.0.25
    qosClass: BestEffort
    startTime: "2020-05-22T15:56:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-22T15:56:51Z"
    generateName: kubia-v1-
    labels:
      app: kubiadeploy
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"98e41fc8-d058-425a-a315-98affabb956b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.27"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:11Z"
    name: kubia-v1-vjkwr
    namespace: default
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: kubia-v1
      uid: 98e41fc8-d058-425a-a315-98affabb956b
    resourceVersion: "1140788"
    selfLink: /api/v1/namespaces/default/pods/kubia-v1-vjkwr
    uid: 71232e70-d9a9-4880-8836-fc189c5c4c2b
  spec:
    containers:
    - image: luksa/kubia:v1
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5e538bfe500f7050be4f320684ebca2ac8ea1e80e210f121aba5c1369c21a530
      image: docker.io/luksa/kubia:v1
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:259e3d728621f001a629a5fe4b56020d0a14e239b0ea82727c1398f155c75a5d
      lastState:
        terminated:
          containerID: docker://f7323f7c2de5bb35c797b122490a7001b28e6780ec53d0627dbcbdfd74cf2d15
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:41Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:53Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.27
    podIPs:
    - ip: 172.17.0.27
    qosClass: BestEffort
    startTime: "2020-05-22T15:56:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-22T15:56:51Z"
    generateName: kubia-v1-
    labels:
      app: kubiadeploy
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"98e41fc8-d058-425a-a315-98affabb956b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.21"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:04Z"
    name: kubia-v1-xpstq
    namespace: default
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicationController
      name: kubia-v1
      uid: 98e41fc8-d058-425a-a315-98affabb956b
    resourceVersion: "1140644"
    selfLink: /api/v1/namespaces/default/pods/kubia-v1-xpstq
    uid: 8cf30d37-d352-400c-85a5-a8a908ab0f72
  spec:
    containers:
    - image: luksa/kubia:v1
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-22T15:56:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2f27acb260a8a848620fd4fd61bf4235a8d2c66b0273402f1cdf3cf7581a8750
      image: docker.io/luksa/kubia:v1
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:259e3d728621f001a629a5fe4b56020d0a14e239b0ea82727c1398f155c75a5d
      lastState:
        terminated:
          containerID: docker://b83cfb2d9e766024cf000d6bd9389c135d50804b6614942ee28b3f401944f226
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:38Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:51Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.21
    podIPs:
    - ip: 172.17.0.21
    qosClass: BestEffort
    startTime: "2020-05-22T15:56:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-24T07:50:54Z"
    generateName: kubiadep-799dcb796c-
    labels:
      app: kubia
      pod-template-hash: 799dcb796c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2893dd0a-469c-4cf4-b995-510509dfd3bb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.26"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:04Z"
    name: kubiadep-799dcb796c-79cx7
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubiadep-799dcb796c
      uid: 2893dd0a-469c-4cf4-b995-510509dfd3bb
    resourceVersion: "1140631"
    selfLink: /api/v1/namespaces/default/pods/kubiadep-799dcb796c-79cx7
    uid: c7e2e6c4-7b1c-4692-b880-17d3039e1619
  spec:
    containers:
    - image: luksa/kubia:v4
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:50:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:50:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0c72f37d4dea6a46c2880891c5fabe0447b27cee0e113144ce973e0612056c7a
      image: docker.io/luksa/kubia:v4
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:64e06eba2c35e7ccba6f26626ac962164382adedcef30b3416517f47d81f7a0b
      lastState:
        terminated:
          containerID: docker://738023c95daea030ac4e72deacae3e320966f1c17961d2055224c40563a1cc0e
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:40Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:51Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.26
    podIPs:
    - ip: 172.17.0.26
    qosClass: BestEffort
    startTime: "2020-05-24T07:50:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-24T07:50:42Z"
    generateName: kubiadep-799dcb796c-
    labels:
      app: kubia
      pod-template-hash: 799dcb796c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2893dd0a-469c-4cf4-b995-510509dfd3bb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.29"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:12Z"
    name: kubiadep-799dcb796c-ljhrx
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubiadep-799dcb796c
      uid: 2893dd0a-469c-4cf4-b995-510509dfd3bb
    resourceVersion: "1140804"
    selfLink: /api/v1/namespaces/default/pods/kubiadep-799dcb796c-ljhrx
    uid: fcf26ea4-99ac-4366-ad55-f26cded9c6c9
  spec:
    containers:
    - image: luksa/kubia:v4
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:50:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:50:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://104af4ce184baf1eacb917aed9681b149cd0fc9e7a589812ee820364849e6f6d
      image: docker.io/luksa/kubia:v4
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:64e06eba2c35e7ccba6f26626ac962164382adedcef30b3416517f47d81f7a0b
      lastState:
        terminated:
          containerID: docker://553d9a0814d25325027310ed8adc9907025b606d2bc3af4711939bb215f7bc68
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:41Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:53Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.29
    podIPs:
    - ip: 172.17.0.29
    qosClass: BestEffort
    startTime: "2020-05-24T07:50:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-24T07:46:55Z"
    generateName: kubiadep-799dcb796c-
    labels:
      app: kubia
      pod-template-hash: 799dcb796c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2893dd0a-469c-4cf4-b995-510509dfd3bb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nodejs"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.31"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:06Z"
    name: kubiadep-799dcb796c-qnv5g
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubiadep-799dcb796c
      uid: 2893dd0a-469c-4cf4-b995-510509dfd3bb
    resourceVersion: "1140667"
    selfLink: /api/v1/namespaces/default/pods/kubiadep-799dcb796c-qnv5g
    uid: dbcfdd2b-f189-41f7-94a7-bab116469dce
  spec:
    containers:
    - image: luksa/kubia:v4
      imagePullPolicy: IfNotPresent
      name: nodejs
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:46:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-24T07:46:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://99a817c1fdf9a62035dbfab750ec7148c26dc726e80edc07858b7771939a8154
      image: docker.io/luksa/kubia:v4
      imageID: docker-pullable://docker.io/luksa/kubia@sha256:64e06eba2c35e7ccba6f26626ac962164382adedcef30b3416517f47d81f7a0b
      lastState:
        terminated:
          containerID: docker://b13fe630f9999818a72efac3f91aac5f2893e737dc6a647efc471d0e19b89c45
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: nodejs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:53Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.31
    podIPs:
    - ip: 172.17.0.31
    qosClass: BestEffort
    startTime: "2020-05-24T07:46:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-31T07:40:33Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-31T07:40:33Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.23"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:17Z"
    name: kubiaresource-v1
    namespace: default
    resourceVersion: "1140878"
    selfLink: /api/v1/namespaces/default/pods/kubiaresource-v1
    uid: 4ddaca78-76fb-4cf0-b1ad-147768d67ff1
  spec:
    containers:
    - command:
      - dd
      - if=/dev/zero
      - of=/dev/null
      image: busybox
      imagePullPolicy: Always
      name: main
      resources:
        limits:
          cpu: 200m
          memory: 10Mi
        requests:
          cpu: 200m
          memory: 10Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-31T07:40:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-31T07:40:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6bcc697e4d404b15a4062570e652991f2fb3c88632af8d04c4fceca5f92c5735
      image: docker.io/busybox:latest
      imageID: docker-pullable://docker.io/busybox@sha256:95cf004f559831017cdf4628aaf1bb30133677be8702a8c5f2994629f637a209
      lastState:
        terminated:
          containerID: docker://c1df193c5bd6cd642918d70031045079d2d6373443b8347b267f4747b337472c
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T07:40:42Z"
      name: main
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:17Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.23
    podIPs:
    - ip: 172.17.0.23
    qosClass: Guaranteed
    startTime: "2020-05-31T07:40:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-11T05:55:52Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"container1"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/share/nginx/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"container2"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"html"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-11T05:55:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:04Z"
    name: mc1
    namespace: default
    resourceVersion: "1140634"
    selfLink: /api/v1/namespaces/default/pods/mc1
    uid: 091e9064-d787-4dd8-a1c3-1b199c563949
  spec:
    containers:
    - image: nginx:1.14.2
      imagePullPolicy: IfNotPresent
      name: container1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: html
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    - args:
      - while true; do date >> /html/index.html; sleep 1; done
      command:
      - /bin/sh
      - -c
      image: nginx:1.14.2
      imagePullPolicy: IfNotPresent
      name: container2
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /html
        name: html
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: html
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T05:55:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T05:55:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://feae0c56c3bf14144b2fda2d34484861ea14b04f6e8bd555ed72ed7d39df7e68
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://e23287692a452e0b9703ca28dd3ce63f6f1bda36c692986d0c31debe5af4d655
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:28Z"
      name: container1
      ready: true
      restartCount: 27
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:49Z"
    - containerID: docker://0378f2b7246b0319a9002222079555bed4a017bf090e3221663e705cc61a3480
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://f563718bd52fe85560f43b8959d0aa40e5afd951232dd41521f6a167909ae746
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:39Z"
      name: container2
      ready: true
      restartCount: 27
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:54Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.7
    podIPs:
    - ip: 172.17.0.7
    qosClass: BestEffort
    startTime: "2020-04-11T05:55:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-18T11:58:02Z"
    labels:
      environment: prepod
      team: ops
      versionid: p268
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:environment: {}
            f:team: {}
            f:versionid: {}
        f:spec:
          f:containers:
            k:{"name":"container1"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/share/nginx/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"container2"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"html"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-19T06:47:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"Ready"}:
              f:lastTransitionTime: {}
              f:status: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-22T15:18:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:message: {}
              f:reason: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.9"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T08:44:15Z"
    name: mctest
    namespace: default
    resourceVersion: "1164998"
    selfLink: /api/v1/namespaces/default/pods/mctest
    uid: 17c9d88b-1ef1-4521-a829-49ba9a3074e1
  spec:
    containers:
    - image: localhost:5000/nginx:latest
      imagePullPolicy: Always
      name: container1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: html
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    - args:
      - while true; do date >> /html/index.html; sleep 1; done
      command:
      - /bin/sh
      - -c
      image: localhost:5000/nginx:latest
      imagePullPolicy: Always
      name: container2
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /html
        name: html
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: html
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-18T11:58:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-04-22T15:18:58Z"
      message: 'containers with unready status: [container1 container2]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-04-22T15:19:16Z"
      message: 'containers with unready status: [container1 container2]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-18T11:58:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1153908f94d7f129d175c71fb1901f522b54ddaeb8a75962b97bb63f10551954
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://1153908f94d7f129d175c71fb1901f522b54ddaeb8a75962b97bb63f10551954
          exitCode: 255
          finishedAt: "2020-04-22T15:15:47Z"
          reason: Error
          startedAt: "2020-04-21T15:01:40Z"
      name: container1
      ready: false
      restartCount: 2
      started: false
      state:
        waiting:
          message: Back-off pulling image "localhost:5000/nginx:latest"
          reason: ImagePullBackOff
    - containerID: docker://f1ec96ef4fe00b27a31a48169dbce3251493cf369d79900c25870a82f699136b
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://f1ec96ef4fe00b27a31a48169dbce3251493cf369d79900c25870a82f699136b
          exitCode: 255
          finishedAt: "2020-04-22T15:15:48Z"
          reason: Error
          startedAt: "2020-04-21T15:01:41Z"
      name: container2
      ready: false
      restartCount: 2
      started: false
      state:
        waiting:
          message: Back-off pulling image "localhost:5000/nginx:latest"
          reason: ImagePullBackOff
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.9
    podIPs:
    - ip: 172.17.0.9
    qosClass: BestEffort
    startTime: "2020-04-18T11:58:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"role":"nfs"},"name":"nfs-server-pod","namespace":"default"},"spec":{"containers":[{"args":["/exports"],"image":"cpuguy83/nfs-server","name":"nfs-server-container","securityContext":{"privileged":true}}]}}
    creationTimestamp: "2020-05-16T11:07:02Z"
    labels:
      role: nfs
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:role: {}
        f:spec:
          f:containers:
            k:{"name":"nfs-server-container"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T11:07:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.24"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:22Z"
    name: nfs-server-pod
    namespace: default
    resourceVersion: "1140913"
    selfLink: /api/v1/namespaces/default/pods/nfs-server-pod
    uid: 95d6b77f-aad0-4011-b388-d72c271e8c5b
  spec:
    containers:
    - args:
      - /exports
      image: cpuguy83/nfs-server
      imagePullPolicy: Always
      name: nfs-server-container
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:07:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:07:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3b5b00c0e1f15a2c1a3ccb56242da31a0227a38532496403795aa54448d9dd7d
      image: docker.io/cpuguy83/nfs-server:latest
      imageID: docker-pullable://docker.io/cpuguy83/nfs-server@sha256:d0fdc431b66160598534c5dc69c216c3a73b95423f877d7e205c1064297a7636
      lastState:
        terminated:
          containerID: docker://2a76d8c9a75d6207316bf7639388b47fa8230611f6e0d41f0adcdea629a8e038
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:47:05Z"
      name: nfs-server-container
      ready: true
      restartCount: 7
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:21Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.24
    podIPs:
    - ip: 172.17.0.24
    qosClass: BestEffort
    startTime: "2020-05-16T11:07:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-24T06:37:20Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"nginx"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/share/nginx/html"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"nginx-storage"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-24T06:37:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.10"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:11Z"
    name: nginx
    namespace: default
    resourceVersion: "1140796"
    selfLink: /api/v1/namespaces/default/pods/nginx
    uid: 742629ed-449a-4d60-bb97-07048c8d41e5
  spec:
    containers:
    - image: nginx:1.14.2
      imagePullPolicy: IfNotPresent
      name: nginx
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: nginx-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: nginx-storage
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-24T06:37:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-24T06:37:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://21cb99da35e9b40a9ff53cc9e2988b3d770bb9d76290176abb54ad5ca6412c13
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://35ec9eafb11bd267b5d66bf0ee1ec775d1d7155a5b910f31279d3d81eeb4c232
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: nginx
      ready: true
      restartCount: 20
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:50Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.10
    podIPs:
    - ip: 172.17.0.10
    qosClass: BestEffort
    startTime: "2020-04-24T06:37:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-23T09:40:55Z"
    generateName: nginx-deployment-6b474476c4-
    labels:
      app: nginx
      pod-template-hash: 6b474476c4
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"3b8b1b1c-67f7-4d4e-9dfc-1d1b294373da"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nginx"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:08Z"
    name: nginx-deployment-6b474476c4-9nq4n
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deployment-6b474476c4
      uid: 3b8b1b1c-67f7-4d4e-9dfc-1d1b294373da
    resourceVersion: "1140731"
    selfLink: /api/v1/namespaces/default/pods/nginx-deployment-6b474476c4-9nq4n
    uid: d2972ef0-e9fa-4475-b0a2-90df523299af
  spec:
    containers:
    - image: nginx:1.14.2
      imagePullPolicy: IfNotPresent
      name: nginx
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-23T09:40:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-23T09:40:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d58d50f73a055c463a837b189a07aa298b540c61a2cd68655e92e0e9857c5b67
      image: docker.io/nginx:1.14.2
      imageID: docker-pullable://docker.io/nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
      lastState:
        terminated:
          containerID: docker://67c642721b8014531baa118ae3b54a2a54c70f91311dcc45d9f1bceadf541270
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:28Z"
      name: nginx
      ready: true
      restartCount: 20
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:49Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.5
    podIPs:
    - ip: 172.17.0.5
    qosClass: BestEffort
    startTime: "2020-04-23T09:40:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T11:22:52Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"app"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/nfs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"nfs-volume"}:
              .: {}
              f:name: {}
              f:nfs:
                .: {}
                f:path: {}
                f:server: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T11:22:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-31T05:46:45Z"
    name: pod-using-nfs
    namespace: default
    resourceVersion: "1051725"
    selfLink: /api/v1/namespaces/default/pods/pod-using-nfs
    uid: 10b9a971-3292-4449-8451-31def1e50994
  spec:
    containers:
    - args:
      - -c
      - while true; do date >> /var/nfs/dates.txt; sleep 5; done
      command:
      - /bin/sh
      image: alpine
      imagePullPolicy: Always
      name: app
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/nfs
        name: nfs-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: nfs-volume
      nfs:
        path: /
        server: 172.17.0.29
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:22:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:22:52Z"
      message: 'containers with unready status: [app]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:22:52Z"
      message: 'containers with unready status: [app]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T11:22:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: alpine
      imageID: ""
      lastState: {}
      name: app
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 192.168.10.180
    phase: Pending
    qosClass: BestEffort
    startTime: "2020-05-16T11:22:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-03T09:47:43Z"
    generateName: ssd-monitor-
    labels:
      app: ssd-monitor
      controller-revision-hash: 757dc89859
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b00ad561-bee7-471c-9ed0-92dddc0904de"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:disk: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:13Z"
    name: ssd-monitor-8r5bd
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: ssd-monitor
      uid: b00ad561-bee7-471c-9ed0-92dddc0904de
    resourceVersion: "1140832"
    selfLink: /api/v1/namespaces/default/pods/ssd-monitor-8r5bd
    uid: 67144473-156f-4f63-b9b0-af7c9b69b3d9
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - localhost.localdomain
    containers:
    - image: luksa/ssd-monitor
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-rf9ww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    nodeSelector:
      disk: ssd
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - name: default-token-rf9ww
      secret:
        defaultMode: 420
        secretName: default-token-rf9ww
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T09:47:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-03T09:47:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1ba1d7fe36b0b83b8109282889cf1d26312d536331e4c7670b2eaf8860dbf106
      image: docker.io/luksa/ssd-monitor:latest
      imageID: docker-pullable://docker.io/luksa/ssd-monitor@sha256:79be3e18ba8f61aed3e34d04738f2f49cf9ef34b044daca3c530f6119421a521
      lastState:
        terminated:
          containerID: docker://02ffc681797ce655a6396d69c4bc85510befc75b6705c75403bf49447bc23129
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:47:00Z"
      name: main
      ready: true
      restartCount: 11
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:57Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.6
    podIPs:
    - ip: 172.17.0.6
    qosClass: BestEffort
    startTime: "2020-05-03T09:47:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-11T04:54:47Z"
    generateName: coredns-66bff467f8-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66bff467f8
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5451b3bb-eccf-49f4-ab44-c1eef46c443b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-11T04:54:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2020-04-11T04:54:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:02Z"
    name: coredns-66bff467f8-t7nnl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-66bff467f8
      uid: 5451b3bb-eccf-49f4-ab44-c1eef46c443b
    resourceVersion: "1140618"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-66bff467f8-t7nnl
    uid: 70861fc6-13d3-4efd-8e1e-0efcb1984439
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.6.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-kjvqp
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: localhost.localdomain
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-kjvqp
      secret:
        defaultMode: 420
        secretName: coredns-token-kjvqp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      message: 'containers with unready status: [coredns]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      message: 'containers with unready status: [coredns]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4e8d98fcb80c295cfad0f9ecef8c350d2168436d2170960cbf05bc12f9aa142d
      image: k8s.gcr.io/coredns:1.6.7
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:2c8d61c46f484d881db43b34d13ca47a269336e576c81cf007ca740fa9ec0800
      lastState:
        terminated:
          containerID: docker://1d0bef390de10c7f2564062519f18d5323748a715e7dd9134a0cef5dd9771901
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:31Z"
      name: coredns
      ready: false
      restartCount: 27
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:48Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.3
    podIPs:
    - ip: 172.17.0.3
    qosClass: Burstable
    startTime: "2020-04-11T04:54:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-11T04:54:47Z"
    generateName: coredns-66bff467f8-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66bff467f8
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5451b3bb-eccf-49f4-ab44-c1eef46c443b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-11T04:54:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2020-04-11T04:54:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:01Z"
    name: coredns-66bff467f8-xxbhp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-66bff467f8
      uid: 5451b3bb-eccf-49f4-ab44-c1eef46c443b
    resourceVersion: "1140612"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-66bff467f8-xxbhp
    uid: 217c7ed0-ed39-404c-9af4-be2b1e5615bf
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.6.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-kjvqp
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: localhost.localdomain
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-kjvqp
      secret:
        defaultMode: 420
        secretName: coredns-token-kjvqp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      message: 'containers with unready status: [coredns]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      message: 'containers with unready status: [coredns]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://18f6b511b1c0b053dfbb25a43e323f59dff2dfc17883bb76e542539287eae965
      image: k8s.gcr.io/coredns:1.6.7
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:2c8d61c46f484d881db43b34d13ca47a269336e576c81cf007ca740fa9ec0800
      lastState:
        terminated:
          containerID: docker://ff7d01d6eb0523531e63abc0c95e84657d31e1f593eb3c3ebb6e5d25975e2151
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:45Z"
      name: coredns
      ready: false
      restartCount: 27
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:48Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.2
    podIPs:
    - ip: 172.17.0.2
    qosClass: Burstable
    startTime: "2020-04-11T04:54:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.10.180:2379
      kubernetes.io/config.hash: ef3e6ef1cf425db26138bb32c82d8156
      kubernetes.io/config.mirror: ef3e6ef1cf425db26138bb32c82d8156
      kubernetes.io/config.seen: "2020-05-30T22:46:08.534948113-07:00"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-05-31T05:46:20Z"
    deletionGracePeriodSeconds: 0
    deletionTimestamp: "2020-06-11T13:09:43Z"
    labels:
      component: etcd
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/etcd.advertise-client-urls: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aac2ec70-f6a5-47e8-b036-9e5e262c103b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"etcd"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/minikube/certs/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/minikube/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-data"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:53:44Z"
    name: etcd-localhost.localdomain
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: localhost.localdomain
      uid: aac2ec70-f6a5-47e8-b036-9e5e262c103b
    resourceVersion: "1165919"
    selfLink: /api/v1/namespaces/kube-system/pods/etcd-localhost.localdomain
    uid: aef5e320-aa84-4394-8c6e-9f71743dfed2
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://192.168.10.180:2379
      - --cert-file=/var/lib/minikube/certs/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/minikube/etcd
      - --initial-advertise-peer-urls=https://192.168.10.180:2380
      - --initial-cluster=localhost.localdomain=https://192.168.10.180:2380
      - --key-file=/var/lib/minikube/certs/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://192.168.10.180:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://192.168.10.180:2380
      - --name=localhost.localdomain
      - --peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/var/lib/minikube/certs/etcd/peer.key
      - --peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt
      image: k8s.gcr.io/etcd:3.4.3-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/minikube/etcd
        name: etcd-data
      - mountPath: /var/lib/minikube/certs/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/minikube/certs/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/minikube/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e63fc24780f07527eef47bea5174641fb831b2a46618aa6d77beabf284c2970f
      image: k8s.gcr.io/etcd:3.4.3-0
      imageID: docker-pullable://k8s.gcr.io/etcd@sha256:4afb99b4690b418ffc2ceb67e1a17376457e441c1f09ab55447f0aaf992fa646
      lastState:
        terminated:
          containerID: docker://430980d75988d70851f8bc4572d87a25ec531f211755941794a4844531552a30
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:44:38Z"
      name: etcd
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:26Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: BestEffort
    startTime: "2020-06-11T05:53:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.10.180:8443
      kubernetes.io/config.hash: bc94aef77ab299b76145ccf6773d0897
      kubernetes.io/config.mirror: bc94aef77ab299b76145ccf6773d0897
      kubernetes.io/config.seen: "2020-05-30T22:46:08.534956903-07:00"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-05-31T05:46:20Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aac2ec70-f6a5-47e8-b036-9e5e262c103b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-apiserver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/minikube/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:53:52Z"
    name: kube-apiserver-localhost.localdomain
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: localhost.localdomain
      uid: aac2ec70-f6a5-47e8-b036-9e5e262c103b
    resourceVersion: "1140579"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-apiserver-localhost.localdomain
    uid: 881fe465-5701-456f-b18e-5a1005a3d16c
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=192.168.10.180
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/var/lib/minikube/certs/ca.crt
      - --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt
      - --etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt
      - --etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --insecure-port=0
      - --kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt
      - --kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt
      - --proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=8443
      - --service-account-key-file=/var/lib/minikube/certs/sa.pub
      - --service-cluster-ip-range=10.96.0.0/12
      - --tls-cert-file=/var/lib/minikube/certs/apiserver.crt
      - --tls-private-key-file=/var/lib/minikube/certs/apiserver.key
      image: k8s.gcr.io/kube-apiserver:v1.18.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 192.168.10.180
          path: /healthz
          port: 8443
          scheme: HTTPS
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      resources:
        requests:
          cpu: 250m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /var/lib/minikube/certs
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /var/lib/minikube/certs
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://591abf826f45e554b03c9c5c531fbb33eb734f7dc567cd6436f2e9bc38ad194a
      image: k8s.gcr.io/kube-apiserver:v1.18.0
      imageID: docker-pullable://k8s.gcr.io/kube-apiserver@sha256:fc4efb55c2a7d4e7b9a858c67e24f00e739df4ef5082500c2b60ea0903f18248
      lastState:
        terminated:
          containerID: docker://e4bb36df0a18ba3663a9ab66c8ceaa197e3e0dfc7d357e69fab397c63d5d7929
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:44:37Z"
      name: kube-apiserver
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:22Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: Burstable
    startTime: "2020-06-11T05:53:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 88e6c47ce14900c76f81269925696e01
      kubernetes.io/config.mirror: 88e6c47ce14900c76f81269925696e01
      kubernetes.io/config.seen: "2020-04-10T21:54:40.693925053-07:00"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-04-11T04:54:46Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aac2ec70-f6a5-47e8-b036-9e5e262c103b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-controller-manager"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/controller-manager.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/libexec/kubernetes/kubelet-plugins/volume/exec"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/minikube/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flexvolume-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.181"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T13:09:43Z"
    name: kube-controller-manager-localhost.localdomain
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: localhost.localdomain
      uid: aac2ec70-f6a5-47e8-b036-9e5e262c103b
    resourceVersion: "1165921"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-controller-manager-localhost.localdomain
    uid: 283dd6fd-b50c-4544-98d0-24fceac26d9d
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/var/lib/minikube/certs/ca.crt
      - --cluster-name=mk
      - --cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt
      - --cluster-signing-key-file=/var/lib/minikube/certs/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt
      - --root-ca-file=/var/lib/minikube/certs/ca.crt
      - --service-account-private-key-file=/var/lib/minikube/certs/sa.key
      - --use-service-account-credentials=true
      image: k8s.gcr.io/kube-controller-manager:v1.18.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /var/lib/minikube/certs
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /var/lib/minikube/certs
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T13:09:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T13:09:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T13:09:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T13:09:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://748d10d0a5a8f17a710e01c347380e19a4914fbdaf091444b45abb3d76b3530b
      image: k8s.gcr.io/kube-controller-manager:v1.18.0
      imageID: docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:d926b172b8fc3568d8eab9736b2f79a1afefcb809d030dd4465cbb0d444ce293
      lastState:
        terminated:
          containerID: docker://cedc003f37a891798be8922e14b8aa0cf82dc083e345756448efa5f54ed49c42
          exitCode: 255
          finishedAt: "2020-06-11T09:54:35Z"
          reason: Error
          startedAt: "2020-06-11T05:53:24Z"
      name: kube-controller-manager
      ready: true
      restartCount: 64
      started: true
      state:
        running:
          startedAt: "2020-06-11T09:54:37Z"
    hostIP: 192.168.10.181
    phase: Running
    podIP: 192.168.10.181
    podIPs:
    - ip: 192.168.10.181
    qosClass: Burstable
    startTime: "2020-06-11T13:09:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-11T04:54:47Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: c8bb659c5
      k8s-app: kube-proxy
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"92ec34da-72c0-4a5e-a27b-caafe103901a"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:05Z"
    name: kube-proxy-hgkj9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 92ec34da-72c0-4a5e-a27b-caafe103901a
    resourceVersion: "1140655"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-hgkj9
    uid: c7a1350b-5f36-4fe5-aea3-5a66dedd9c21
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - localhost.localdomain
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.18.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-rvw52
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    nodeSelector:
      kubernetes.io/os: linux
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-rvw52
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-rvw52
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fb3db548f4461a61fced2a69ee98d33454cf2dcb37f2c24e7ec9d087c92f8847
      image: k8s.gcr.io/kube-proxy:v1.18.0
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:9e858386d52d0abaf936c1d10a763648ab7d85c8eb0af08a50a64238146e5571
      lastState:
        terminated:
          containerID: docker://23ab73f2445cae26a16ee3bd60f1d16b80257cec26f37a0120a25d967a8ab326
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:29Z"
      name: kube-proxy
      ready: true
      restartCount: 27
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:49Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: BestEffort
    startTime: "2020-04-11T04:54:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 5795d0c442cb997ff93c49feeb9f6386
      kubernetes.io/config.mirror: 5795d0c442cb997ff93c49feeb9f6386
      kubernetes.io/config.seen: "2020-04-10T21:54:40.693927363-07:00"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-04-11T04:54:46Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aac2ec70-f6a5-47e8-b036-9e5e262c103b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-scheduler"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/scheduler.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:53:34Z"
    name: kube-scheduler-localhost.localdomain
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: localhost.localdomain
      uid: aac2ec70-f6a5-47e8-b036-9e5e262c103b
    resourceVersion: "1140473"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-scheduler-localhost.localdomain
    uid: c01483db-3c56-4d35-996d-2b1d1506dd59
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      image: k8s.gcr.io/kube-scheduler:v1.18.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:53:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://295751cffa2306677fadcd02a66f3b5233aa4949b1e8453fcfd921ac39266d33
      image: k8s.gcr.io/kube-scheduler:v1.18.0
      imageID: docker-pullable://k8s.gcr.io/kube-scheduler@sha256:33063bc856e99d12b9cb30aab1c1c755ecd458d5bd130270da7c51c70ca10cf6
      lastState:
        terminated:
          containerID: docker://28b911671935e62536aa54a1a0e95f312358f7225fef2f775f73e70f5c5c9148
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-06-02T03:50:41Z"
      name: kube-scheduler
      ready: true
      restartCount: 66
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:22Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: Burstable
    startTime: "2020-06-11T05:53:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:02:34Z"
    generateName: metrics-server-84969c48c8-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 84969c48c8
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e49beb8c-d360-449d-8d84-f08c62aa43a8"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"metrics-server"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:02:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.16"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T08:44:19Z"
    name: metrics-server-84969c48c8-wh66m
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-84969c48c8
      uid: e49beb8c-d360-449d-8d84-f08c62aa43a8
    resourceVersion: "1165008"
    selfLink: /api/v1/namespaces/kube-system/pods/metrics-server-84969c48c8-wh66m
    uid: 0a71d289-1643-44ea-93f4-8ba8ceefe2de
  spec:
    containers:
    - command:
      - /metrics-server
      - --source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true&kubeletPort=10250&insecure=true
      image: k8s.gcr.io/metrics-server-amd64:v0.2.1
      imagePullPolicy: Always
      name: metrics-server
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-trtgj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-trtgj
      secret:
        defaultMode: 420
        secretName: default-token-trtgj
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:02:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T08:44:08Z"
      message: 'containers with unready status: [metrics-server]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T08:44:08Z"
      message: 'containers with unready status: [metrics-server]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:02:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8cfee38aa56f4a316f7df9486d9c4e0e46c78d07d6be070cb80f0c3c0e127847
      image: k8s.gcr.io/metrics-server-amd64:v0.2.1
      imageID: docker-pullable://k8s.gcr.io/metrics-server-amd64@sha256:49a9f12f7067d11f42c803dbe61ed2c1299959ad85cb315b25ff7eef8e6b8892
      lastState:
        terminated:
          containerID: docker://8cfee38aa56f4a316f7df9486d9c4e0e46c78d07d6be070cb80f0c3c0e127847
          exitCode: 255
          finishedAt: "2020-06-11T08:44:08Z"
          reason: Error
          startedAt: "2020-06-11T08:44:06Z"
      name: metrics-server
      ready: false
      restartCount: 592
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=metrics-server pod=metrics-server-84969c48c8-wh66m_kube-system(0a71d289-1643-44ea-93f4-8ba8ceefe2de)
          reason: CrashLoopBackOff
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.16
    podIPs:
    - ip: 172.17.0.16
    qosClass: BestEffort
    startTime: "2020-05-16T05:02:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "10254"
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-05-06T11:40:28Z"
    generateName: nginx-ingress-controller-6d57c87cb9-
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/part-of: kube-system
      pod-template-hash: 6d57c87cb9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"46fefa1c-bf9b-497e-a564-6e221f890491"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"nginx-ingress-controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:protocol: {}
                k:{"containerPort":18080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-06T11:40:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.13"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T08:46:14Z"
    name: nginx-ingress-controller-6d57c87cb9-z8sxc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-ingress-controller-6d57c87cb9
      uid: 46fefa1c-bf9b-497e-a564-6e221f890491
    resourceVersion: "1165266"
    selfLink: /api/v1/namespaces/kube-system/pods/nginx-ingress-controller-6d57c87cb9-z8sxc
    uid: dd29a7b4-96d3-40df-b1b2-630f102a006b
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf
      - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
      - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
      - --annotations-prefix=nginx.ingress.kubernetes.io
      - --report-node-internal-ip-address
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: nginx-ingress-controller
      ports:
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      - containerPort: 18080
        hostPort: 18080
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsUser: 33
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: nginx-ingress-token-lmfhj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: nginx-ingress
    serviceAccountName: nginx-ingress
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: nginx-ingress-token-lmfhj
      secret:
        defaultMode: 420
        secretName: nginx-ingress-token-lmfhj
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-06T11:40:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-06T11:40:28Z"
      message: 'containers with unready status: [nginx-ingress-controller]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-06T11:40:28Z"
      message: 'containers with unready status: [nginx-ingress-controller]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-06T11:40:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bdc536ab2e64c07f0758724aeae7724e6119ecd4b2229a4dc222395806379001
      image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
      imageID: docker-pullable://quay.io/kubernetes-ingress-controller/nginx-ingress-controller@sha256:d0b22f715fcea5598ef7f869d308b55289a3daaa12922fa52a1abf17703c88e7
      lastState:
        terminated:
          containerID: docker://bdc536ab2e64c07f0758724aeae7724e6119ecd4b2229a4dc222395806379001
          exitCode: 143
          finishedAt: "2020-06-11T08:46:14Z"
          reason: Error
          startedAt: "2020-06-11T08:45:44Z"
      name: nginx-ingress-controller
      ready: false
      restartCount: 1744
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=nginx-ingress-controller
            pod=nginx-ingress-controller-6d57c87cb9-z8sxc_kube-system(dd29a7b4-96d3-40df-b1b2-630f102a006b)
          reason: CrashLoopBackOff
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.13
    podIPs:
    - ip: 172.17.0.13
    qosClass: BestEffort
    startTime: "2020-05-06T11:40:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","integration-test":"storage-provisioner"},"name":"storage-provisioner","namespace":"kube-system"},"spec":{"containers":[{"command":["/storage-provisioner"],"image":"gcr.io/k8s-minikube/storage-provisioner:v1.8.1","imagePullPolicy":"IfNotPresent","name":"storage-provisioner","volumeMounts":[{"mountPath":"/tmp","name":"tmp"}]}],"hostNetwork":true,"serviceAccountName":"storage-provisioner","volumes":[{"hostPath":{"path":"/tmp","type":"Directory"},"name":"tmp"}]}}
    creationTimestamp: "2020-04-11T04:54:41Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      integration-test: storage-provisioner
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2020-04-11T04:54:41Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:integration-test: {}
        f:spec:
          f:containers:
            k:{"name":"storage-provisioner"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-11T04:54:41Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:39Z"
    name: storage-provisioner
    namespace: kube-system
    resourceVersion: "1141062"
    selfLink: /api/v1/namespaces/kube-system/pods/storage-provisioner
    uid: f7ac1c31-65d8-4761-ac44-4afe24af9bc1
  spec:
    containers:
    - command:
      - /storage-provisioner
      image: gcr.io/k8s-minikube/storage-provisioner:v1.8.1
      imagePullPolicy: IfNotPresent
      name: storage-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: storage-provisioner-token-blhhf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: storage-provisioner
    serviceAccountName: storage-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /tmp
        type: Directory
      name: tmp
    - name: storage-provisioner-token-blhhf
      secret:
        defaultMode: 420
        secretName: storage-provisioner-token-blhhf
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-11T04:54:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e1b44d15b5731b4f0d518ed941fd8c297844582dd89ded4658da0d647340d117
      image: gcr.io/k8s-minikube/storage-provisioner:v1.8.1
      imageID: docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:088daa9fcbccf04c3f415d77d5a6360d2803922190b675cb7fc88a9d2d91985a
      lastState:
        terminated:
          containerID: docker://96ae0b1d11272e503868179c4a68710cef52c28b83d4531edb3c1fd02b4b8f6c
          exitCode: 1
          finishedAt: "2020-06-11T05:54:24Z"
          reason: Error
          startedAt: "2020-06-11T05:53:49Z"
      name: storage-provisioner
      ready: true
      restartCount: 42
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:54:38Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: BestEffort
    startTime: "2020-04-11T04:54:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:02:34Z"
    generateName: tiller-deploy-58bf6f4995-
    labels:
      app: helm
      name: tiller
      pod-template-hash: 58bf6f4995
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"cedf3038-1151-48e9-b04d-3d67cf80b21c"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"tiller"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"TILLER_HISTORY_MAX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TILLER_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":44134,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":44135,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.19"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:12Z"
    name: tiller-deploy-58bf6f4995-8wx89
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tiller-deploy-58bf6f4995
      uid: cedf3038-1151-48e9-b04d-3d67cf80b21c
    resourceVersion: "1140815"
    selfLink: /api/v1/namespaces/kube-system/pods/tiller-deploy-58bf6f4995-8wx89
    uid: baae9e2d-ee41-4f6f-bea4-7e7769c91e8c
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: TILLER_NAMESPACE
        value: kube-system
      - name: TILLER_HISTORY_MAX
        value: "0"
      image: gcr.io/kubernetes-helm/tiller:v2.16.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /liveness
          port: 44135
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: tiller
      ports:
      - containerPort: 44134
        name: tiller
        protocol: TCP
      - containerPort: 44135
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 44135
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: tiller-token-z9b5c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: tiller
    serviceAccountName: tiller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: tiller-token-z9b5c
      secret:
        defaultMode: 420
        secretName: tiller-token-z9b5c
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:02:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:02:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e7e58dc3180dff32a7c63ef08f21a31a2739b1dc59f3104225490b1c2b2aea6e
      image: gcr.io/kubernetes-helm/tiller:v2.16.3
      imageID: docker-pullable://gcr.io/kubernetes-helm/tiller@sha256:bf60a047996e3e4823fe5fe7af0d26d68352ed89c3f3f11b8f8bec1e584afda5
      lastState:
        terminated:
          containerID: docker://db1509d239e9de05451bc28f0fb14460e62ea2315a553b1f3a295637e949025d
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:41Z"
      name: tiller
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:51Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.19
    podIPs:
    - ip: 172.17.0.19
    qosClass: BestEffort
    startTime: "2020-05-16T05:02:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2020-04-19T15:17:28Z"
    generateName: dashboard-metrics-scraper-84bfdf55ff-
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 84bfdf55ff
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:seccomp.security.alpha.kubernetes.io/pod: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ca194d02-0357-45b0-ad8a-82aa2e225956"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"dashboard-metrics-scraper"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:04Z"
    name: dashboard-metrics-scraper-84bfdf55ff-p954t
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dashboard-metrics-scraper-84bfdf55ff
      uid: ca194d02-0357-45b0-ad8a-82aa2e225956
    resourceVersion: "1140637"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/pods/dashboard-metrics-scraper-84bfdf55ff-p954t
    uid: 634be0cf-c775-4397-ad81-4a5eb3ea352e
  spec:
    containers:
    - image: kubernetesui/metrics-scraper:v1.0.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: dashboard-metrics-scraper
      ports:
      - containerPort: 8000
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-zd7wm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-zd7wm
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-zd7wm
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-19T15:17:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-19T15:17:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ec2853e523022e6aa17959e56b66c2578a3b8572e59b816c329e03e4f1359c3b
      image: docker.io/kubernetesui/metrics-scraper:v1.0.2
      imageID: docker-pullable://docker.io/kubernetesui/metrics-scraper@sha256:2026f9f7558d0f25cc6bab74ea201b4e9d5668fbc378ef64e13fddaea570efc0
      lastState:
        terminated:
          containerID: docker://45257d005cfc0c61c67a85bb1dc82b773c611d1f9e54347aa0940e6c010c0112
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:35Z"
      name: dashboard-metrics-scraper
      ready: true
      restartCount: 25
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:50Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.11
    podIPs:
    - ip: 172.17.0.11
    qosClass: BestEffort
    startTime: "2020-04-19T15:17:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-04-19T15:17:27Z"
    generateName: kubernetes-dashboard-bc446cc64-
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: bc446cc64
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"148a6897-c09d-492f-8d04-171bd49817ed"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kubernetes-dashboard"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:beta.kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-20T04:49:27Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.15"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T09:54:23Z"
    name: kubernetes-dashboard-bc446cc64-kj4xt
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-bc446cc64
      uid: 148a6897-c09d-492f-8d04-171bd49817ed
    resourceVersion: "1165435"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/pods/kubernetes-dashboard-bc446cc64-kj4xt
    uid: e85239c7-c9a1-437d-b64c-b554ded828c5
  spec:
    containers:
    - args:
      - --namespace=kubernetes-dashboard
      - --enable-skip-login
      - --disable-settings-authorizer
      image: kubernetesui/dashboard:v2.0.0-rc6
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard
      ports:
      - containerPort: 9090
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-zd7wm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    nodeSelector:
      beta.kubernetes.io/os: linux
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-zd7wm
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-zd7wm
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-04-19T15:17:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T09:54:14Z"
      message: 'containers with unready status: [kubernetes-dashboard]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T09:54:14Z"
      message: 'containers with unready status: [kubernetes-dashboard]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-04-19T15:17:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://03ce201d79b1db0fc9a800f98f226c7da7f4b67022110112494f946fcd095d1f
      image: docker.io/kubernetesui/dashboard:v2.0.0-rc6
      imageID: docker-pullable://docker.io/kubernetesui/dashboard@sha256:61f9c378c427a3f8a9643f83baa9f96db1ae1357c67a93b533ae7b36d71c69dc
      lastState:
        terminated:
          containerID: docker://03ce201d79b1db0fc9a800f98f226c7da7f4b67022110112494f946fcd095d1f
          exitCode: 2
          finishedAt: "2020-06-11T09:54:13Z"
          reason: Error
          startedAt: "2020-06-11T09:54:12Z"
      name: kubernetes-dashboard
      ready: false
      restartCount: 2125
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=kubernetes-dashboard
            pod=kubernetes-dashboard-bc446cc64-kj4xt_kubernetes-dashboard(e85239c7-c9a1-437d-b64c-b554ded828c5)
          reason: CrashLoopBackOff
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.15
    podIPs:
    - ip: 172.17.0.15
    qosClass: BestEffort
    startTime: "2020-04-19T15:17:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T06:16:01Z"
    generateName: grafana-7757d5f45d-
    labels:
      app: grafana
      pod-template-hash: 7757d5f45d
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:containers:
            k:{"name":"grafana"}:
              f:image: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T06:31:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"35f80e52-f1ac-4bf7-81bd-a182ce9a7bc4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"grafana"}:
              .: {}
              f:envFrom: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.22"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:09Z"
    name: grafana-7757d5f45d-dkmtd
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: grafana-7757d5f45d
      uid: 35f80e52-f1ac-4bf7-81bd-a182ce9a7bc4
    resourceVersion: "1140769"
    selfLink: /api/v1/namespaces/monitoring/pods/grafana-7757d5f45d-dkmtd
    uid: d592fe61-b42c-4349-8af0-8b9fc0a35cc0
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: grafana-creds
      image: docker.io/grafana/grafana:5.3.2
      imagePullPolicy: IfNotPresent
      name: grafana
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-z79m7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-z79m7
      secret:
        defaultMode: 420
        secretName: default-token-z79m7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:16:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:16:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e92ce2c141379538ac107311b94c50726b5c5cffb41b6d032ecb997b0ea4e22e
      image: docker.io/grafana/grafana:5.3.2
      imageID: docker-pullable://docker.io/grafana/grafana@sha256:214d44aa104b26c36b235da13c0b5ca9baa75057bcd14edcea58bbbe8b596792
      lastState:
        terminated:
          containerID: docker://97ebef01b228480c828fa56177a99b57a5c19be4448ece7d6fef1c8ba536a76d
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: grafana
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:52Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.22
    podIPs:
    - ip: 172.17.0.22
    qosClass: BestEffort
    startTime: "2020-05-16T06:16:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:27:38Z"
    generateName: influxdb-7f694df996-
    labels:
      app: influxdb
      pod-template-hash: 7f694df996
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"cd780be2-e0d7-45fd-8146-2330a3ee705b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"influxdb"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/lib/influxdb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"var-lib-influxdb"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:27:38Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2020-05-16T05:27:38Z"
    name: influxdb-7f694df996-mqvww
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: influxdb-7f694df996
      uid: cd780be2-e0d7-45fd-8146-2330a3ee705b
    resourceVersion: "792531"
    selfLink: /api/v1/namespaces/monitoring/pods/influxdb-7f694df996-mqvww
    uid: ff44ddf1-0003-45fa-bf4c-262ef3d55f10
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: influxdb-creds
      image: docker.io/influxdb:1.6.4
      imagePullPolicy: IfNotPresent
      name: influxdb
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/influxdb
        name: var-lib-influxdb
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-z79m7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: var-lib-influxdb
      persistentVolumeClaim:
        claimName: influxdb-pvc
    - name: default-token-z79m7
      secret:
        defaultMode: 420
        secretName: default-token-z79m7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:27:38Z"
      message: persistentvolumeclaim "influxdb-pvc" not found
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:03:52Z"
    generateName: prometheus-alertmanager-69db67d668-
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: alertmanager
      heritage: Helm
      pod-template-hash: 69db67d668
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dd398a2f-f611-425b-8525-54333af41024"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"prometheus-alertmanager"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"POD_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9093,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"prometheus-alertmanager-configmap-reload"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"storage-volume"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.20"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:23Z"
    name: prometheus-alertmanager-69db67d668-t5ctw
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-alertmanager-69db67d668
      uid: dd398a2f-f611-425b-8525-54333af41024
    resourceVersion: "1140928"
    selfLink: /api/v1/namespaces/monitoring/pods/prometheus-alertmanager-69db67d668-t5ctw
    uid: 86b54af7-3ca6-4291-81a9-9d2d064dd8f6
  spec:
    containers:
    - args:
      - --config.file=/etc/config/alertmanager.yml
      - --storage.path=/data
      - --cluster.advertise-address=$(POD_IP):6783
      - --web.external-url=http://localhost:9093
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: prom/alertmanager:v0.20.0
      imagePullPolicy: IfNotPresent
      name: prometheus-alertmanager
      ports:
      - containerPort: 9093
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9093
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-alertmanager-token-vxct4
        readOnly: true
    - args:
      - --volume-dir=/etc/config
      - --webhook-url=http://127.0.0.1:9093/-/reload
      image: jimmidyson/configmap-reload:v0.3.0
      imagePullPolicy: IfNotPresent
      name: prometheus-alertmanager-configmap-reload
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-alertmanager-token-vxct4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-alertmanager
    serviceAccountName: prometheus-alertmanager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: prometheus-alertmanager
      name: config-volume
    - name: storage-volume
      persistentVolumeClaim:
        claimName: prometheus-alertmanager
    - name: prometheus-alertmanager-token-vxct4
      secret:
        defaultMode: 420
        secretName: prometheus-alertmanager-token-vxct4
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://41d7c207a7f8986bd92a27a40bb61418cba93b937240b6264577e6348c15e95f
      image: docker.io/prom/alertmanager:v0.20.0
      imageID: docker-pullable://docker.io/prom/alertmanager@sha256:7e4e9f7a0954b45736d149c40e9620a6664036bb05f0dce447bef5042b139f5d
      lastState:
        terminated:
          containerID: docker://5ba556cbc865956b1320a4d3e5c5867dc5b86081f0d5344d4049c256188bda5e
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:38Z"
      name: prometheus-alertmanager
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:50Z"
    - containerID: docker://53de0f04ee485f17d677ff9c651cee692c6da1f504b5db3e981a3a9b19a21368
      image: docker.io/jimmidyson/configmap-reload:v0.3.0
      imageID: docker-pullable://docker.io/jimmidyson/configmap-reload@sha256:d107c7a235c266273b1c3502a391fec374430e5625539403d0de797fa9c556a2
      lastState:
        terminated:
          containerID: docker://17b6ffd322172e5ab5250acb6d95f6311a032c7aef291b3eae9d89a5f44a4f7f
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: prometheus-alertmanager-configmap-reload
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:54Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.20
    podIPs:
    - ip: 172.17.0.20
    qosClass: BestEffort
    startTime: "2020-05-16T05:03:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:03:52Z"
    generateName: prometheus-kube-state-metrics-55c864f698-
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: kube-state-metrics
      pod-template-hash: 55c864f698
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d606ea37-cfde-4085-b946-bcdae5c3db4e"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-state-metrics"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.28"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T09:54:17Z"
    name: prometheus-kube-state-metrics-55c864f698-8fxcl
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-kube-state-metrics-55c864f698
      uid: d606ea37-cfde-4085-b946-bcdae5c3db4e
    resourceVersion: "1165416"
    selfLink: /api/v1/namespaces/monitoring/pods/prometheus-kube-state-metrics-55c864f698-8fxcl
    uid: 7a0aa5d6-e6e2-4eab-b356-c5f753f11959
  spec:
    containers:
    - args:
      - --collectors=certificatesigningrequests
      - --collectors=configmaps
      - --collectors=cronjobs
      - --collectors=daemonsets
      - --collectors=deployments
      - --collectors=endpoints
      - --collectors=horizontalpodautoscalers
      - --collectors=ingresses
      - --collectors=jobs
      - --collectors=limitranges
      - --collectors=namespaces
      - --collectors=nodes
      - --collectors=persistentvolumeclaims
      - --collectors=persistentvolumes
      - --collectors=poddisruptionbudgets
      - --collectors=pods
      - --collectors=replicasets
      - --collectors=replicationcontrollers
      - --collectors=resourcequotas
      - --collectors=secrets
      - --collectors=services
      - --collectors=statefulsets
      - --collectors=storageclasses
      image: quay.io/coreos/kube-state-metrics:v1.9.5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kube-state-metrics
      ports:
      - containerPort: 8080
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-kube-state-metrics-token-gmblg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsUser: 65534
    serviceAccount: prometheus-kube-state-metrics
    serviceAccountName: prometheus-kube-state-metrics
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: prometheus-kube-state-metrics-token-gmblg
      secret:
        defaultMode: 420
        secretName: prometheus-kube-state-metrics-token-gmblg
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      message: 'containers with unready status: [kube-state-metrics]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      message: 'containers with unready status: [kube-state-metrics]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a113c965062424707bb9aa99487a6243a5582c76b53b37072029bbf000092a1d
      image: quay.io/coreos/kube-state-metrics:v1.9.5
      imageID: docker-pullable://quay.io/coreos/kube-state-metrics@sha256:9d29333ad1cc8e14b26e40daea3739cec21b765f6077c6764546779deec3f54b
      lastState:
        terminated:
          containerID: docker://36555c126f83f27ab619f9a002c1a7691496e829c9c3a92d4859091c52e7fe28
          exitCode: 255
          finishedAt: "2020-06-11T08:44:05Z"
          reason: Error
          startedAt: "2020-06-11T08:44:04Z"
      name: kube-state-metrics
      ready: false
      restartCount: 744
      started: false
      state:
        terminated:
          containerID: docker://a113c965062424707bb9aa99487a6243a5582c76b53b37072029bbf000092a1d
          exitCode: 255
          finishedAt: "2020-06-11T09:54:17Z"
          reason: Error
          startedAt: "2020-06-11T09:54:16Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.28
    podIPs:
    - ip: 172.17.0.28
    qosClass: BestEffort
    startTime: "2020-05-16T05:03:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:03:52Z"
    generateName: prometheus-node-exporter-
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: node-exporter
      controller-revision-hash: 5f75fc697f
      heritage: Helm
      pod-template-generation: "1"
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:heritage: {}
            f:pod-template-generation: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"85810446-a712-4e41-b711-a367d9150fac"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"prometheus-node-exporter"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9100,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/sys"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.10.180"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:06Z"
    name: prometheus-node-exporter-6cr5n
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-node-exporter
      uid: 85810446-a712-4e41-b711-a367d9150fac
    resourceVersion: "1140660"
    selfLink: /api/v1/namespaces/monitoring/pods/prometheus-node-exporter-6cr5n
    uid: ea7c5309-dbde-42ac-bca7-4a7639462dc0
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - localhost.localdomain
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      image: prom/node-exporter:v0.18.1
      imagePullPolicy: IfNotPresent
      name: prometheus-node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-node-exporter-token-khmn7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: prometheus-node-exporter
    serviceAccountName: prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - name: prometheus-node-exporter-token-khmn7
      secret:
        defaultMode: 420
        secretName: prometheus-node-exporter-token-khmn7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5d065e0c7ac6760cdf2eb3972f48061674a095d53ae52f6cc29a976ad1155a14
      image: docker.io/prom/node-exporter:v0.18.1
      imageID: docker-pullable://docker.io/prom/node-exporter@sha256:a2f29256e53cc3e0b64d7a472512600b2e9410347d53cdc85b49f659c17e02ee
      lastState:
        terminated:
          containerID: docker://cc163cf02d64f30abb3b9e31d99002764d406b59b524a53b19f3288176dbb264
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:30Z"
      name: prometheus-node-exporter
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:50Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 192.168.10.180
    podIPs:
    - ip: 192.168.10.180
    qosClass: BestEffort
    startTime: "2020-05-16T05:03:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:03:52Z"
    generateName: prometheus-pushgateway-fd4679c5f-
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: pushgateway
      heritage: Helm
      pod-template-hash: fd4679c5f
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9adca967-6b66-4286-94ab-e9ec2ffa4d80"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"prometheus-pushgateway"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9091,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.17"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:15Z"
    name: prometheus-pushgateway-fd4679c5f-j5f49
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-pushgateway-fd4679c5f
      uid: 9adca967-6b66-4286-94ab-e9ec2ffa4d80
    resourceVersion: "1140854"
    selfLink: /api/v1/namespaces/monitoring/pods/prometheus-pushgateway-fd4679c5f-j5f49
    uid: bd261f57-e38a-4e80-8bb4-83e1a455ff19
  spec:
    containers:
    - image: prom/pushgateway:v1.0.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9091
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: prometheus-pushgateway
      ports:
      - containerPort: 9091
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9091
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-pushgateway-token-89vpf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-pushgateway
    serviceAccountName: prometheus-pushgateway
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: prometheus-pushgateway-token-89vpf
      secret:
        defaultMode: 420
        secretName: prometheus-pushgateway-token-89vpf
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://07582421336ce54d97383682e10b1a52fd023bf3d3a25469722947100c5b3772
      image: docker.io/prom/pushgateway:v1.0.1
      imageID: docker-pullable://docker.io/prom/pushgateway@sha256:a5df603478824c9982509eeae9e78a35b0c84ebbdb6a8a592b9f6141b4e72d06
      lastState:
        terminated:
          containerID: docker://551648c841223836effe7c5d4dc9660e75a85b2ba4178b14ef554367de85ca05
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:40Z"
      name: prometheus-pushgateway
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:49Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.17
    podIPs:
    - ip: 172.17.0.17
    qosClass: BestEffort
    startTime: "2020-05-16T05:03:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T05:03:52Z"
    generateName: prometheus-server-d8547496d-
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: server
      heritage: Helm
      pod-template-hash: d8547496d
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a5bdb33b-b9fc-40b4-8358-0ea957a24e79"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"prometheus-server"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"prometheus-server-configmap-reload"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"storage-volume"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:45:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.18"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-06-11T05:54:33Z"
    name: prometheus-server-d8547496d-s6wdl
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-server-d8547496d
      uid: a5bdb33b-b9fc-40b4-8358-0ea957a24e79
    resourceVersion: "1141023"
    selfLink: /api/v1/namespaces/monitoring/pods/prometheus-server-d8547496d-s6wdl
    uid: 298f600a-ae7f-4c70-ae74-b271dff578af
  spec:
    containers:
    - args:
      - --volume-dir=/etc/config
      - --webhook-url=http://127.0.0.1:9090/-/reload
      image: jimmidyson/configmap-reload:v0.3.0
      imagePullPolicy: IfNotPresent
      name: prometheus-server-configmap-reload
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-server-token-5ks97
        readOnly: true
    - args:
      - --storage.tsdb.retention.time=15d
      - --config.file=/etc/config/prometheus.yml
      - --storage.tsdb.path=/data
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      image: prom/prometheus:v2.18.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: prometheus-server
      ports:
      - containerPort: 9090
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-server-token-5ks97
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-server
    serviceAccountName: prometheus-server
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: prometheus-server
      name: config-volume
    - name: storage-volume
      persistentVolumeClaim:
        claimName: prometheus-server
    - name: prometheus-server-token-5ks97
      secret:
        defaultMode: 420
        secretName: prometheus-server-token-5ks97
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-06-11T05:54:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T05:03:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://066ece369cd2ee049f1a9ee15adc516e6f12aa757c926e70a795ce4c7c89df24
      image: docker.io/prom/prometheus:v2.18.1
      imageID: docker-pullable://docker.io/prom/prometheus@sha256:5880ec936055fad18ccee798d2a63f64ed85bd28e8e0af17c6923a090b686c3d
      lastState:
        terminated:
          containerID: docker://126a2da852104760702631f33d9c5d2f7c3a6d3b722b8019c1f8e08afe3dd014
          exitCode: 255
          finishedAt: "2020-06-11T05:53:04Z"
          reason: Error
          startedAt: "2020-05-31T05:46:42Z"
      name: prometheus-server
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:55Z"
    - containerID: docker://ef28f7434f0bdf25c029cf8372f3c111fbd781280eed423ae8e728e1ead7ed02
      image: docker.io/jimmidyson/configmap-reload:v0.3.0
      imageID: docker-pullable://docker.io/jimmidyson/configmap-reload@sha256:d107c7a235c266273b1c3502a391fec374430e5625539403d0de797fa9c556a2
      lastState:
        terminated:
          containerID: docker://ca78c573ba19922148ca8b7856ba5a762f44d5d402c3eb293da8c5047b0f2b25
          exitCode: 255
          finishedAt: "2020-06-11T05:53:03Z"
          reason: Error
          startedAt: "2020-05-31T05:46:39Z"
      name: prometheus-server-configmap-reload
      ready: true
      restartCount: 8
      started: true
      state:
        running:
          startedAt: "2020-06-11T05:53:50Z"
    hostIP: 192.168.10.180
    phase: Running
    podIP: 172.17.0.18
    podIPs:
    - ip: 172.17.0.18
    qosClass: BestEffort
    startTime: "2020-05-16T05:03:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-05-16T06:13:11Z"
    generateName: telegraf-794bc96857-
    labels:
      app: telegraf
      pod-template-hash: 794bc96857
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"30903849-3441-4350-9dce-72e8e2be3ca1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"telegraf"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/telegraf/telegraf.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"telegraf-config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T06:13:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-05-31T05:46:46Z"
    name: telegraf-794bc96857-gp7c6
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: telegraf-794bc96857
      uid: 30903849-3441-4350-9dce-72e8e2be3ca1
    resourceVersion: "1051729"
    selfLink: /api/v1/namespaces/monitoring/pods/telegraf-794bc96857-gp7c6
    uid: c8be495e-310e-48d2-adcd-339b9ac6f519
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: telegraf-secrets
      image: telegraf:1.10.0
      imagePullPolicy: IfNotPresent
      name: telegraf
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/telegraf/telegraf.conf
        name: telegraf-config-volume
        readOnly: true
        subPath: telegraf.conf
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-z79m7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: localhost.localdomain
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: telegraf-config
      name: telegraf-config-volume
    - name: default-token-z79m7
      secret:
        defaultMode: 420
        secretName: default-token-z79m7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:13:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:13:11Z"
      message: 'containers with unready status: [telegraf]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:13:11Z"
      message: 'containers with unready status: [telegraf]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-05-16T06:13:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: telegraf:1.10.0
      imageID: ""
      lastState: {}
      name: telegraf
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          reason: ContainerCreating
    hostIP: 192.168.10.180
    phase: Pending
    qosClass: BestEffort
    startTime: "2020-05-16T06:13:11Z"
- apiVersion: v1
  kind: ReplicationController
  metadata:
    creationTimestamp: "2020-05-22T15:56:51Z"
    generation: 1
    labels:
      app: kubiadeploy
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:replicas: {}
          f:selector:
            .: {}
            f:app: {}
          f:template:
            .: {}
            f:metadata:
              .: {}
              f:creationTimestamp: {}
              f:labels:
                .: {}
                f:app: {}
              f:name: {}
            f:spec:
              .: {}
              f:containers:
                .: {}
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-22T15:56:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:11Z"
    name: kubia-v1
    namespace: default
    resourceVersion: "1140791"
    selfLink: /api/v1/namespaces/default/replicationcontrollers/kubia-v1
    uid: 98e41fc8-d058-425a-a315-98affabb956b
  spec:
    replicas: 3
    selector:
      app: kubiadeploy
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubiadeploy
        name: kubia
      spec:
        containers:
        - image: luksa/kubia:v1
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-17T07:20:43Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:ports:
            .: {}
            k:{"port":32323,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:sessionAffinityConfig:
            .: {}
            f:clientIP:
              .: {}
              f:timeoutSeconds: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-17T07:20:43Z"
    name: configmapservice
    namespace: default
    resourceVersion: "833437"
    selfLink: /api/v1/namespaces/default/services/configmapservice
    uid: 5479d013-866a-4cb0-84d5-25131d90ddf5
  spec:
    clusterIP: 10.108.225.187
    ports:
    - port: 32323
      protocol: TCP
      targetPort: 80
    selector:
      app: fortune-configmap-volume
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-23T10:14:14Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-23T10:14:14Z"
    name: first-svc-deploy
    namespace: default
    resourceVersion: "983313"
    selfLink: /api/v1/namespaces/default/services/first-svc-deploy
    uid: 0825b496-e087-43b1-b90c-3b7613e0e191
  spec:
    clusterIP: 10.108.230.74
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 31234
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: nginx
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-04-11T04:54:39Z"
    labels:
      component: apiserver
      provider: kubernetes
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:component: {}
            f:provider: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kube-apiserver
      operation: Update
      time: "2020-04-11T04:54:39Z"
    name: kubernetes
    namespace: default
    resourceVersion: "153"
    selfLink: /api/v1/namespaces/default/services/kubernetes
    uid: 7941510e-de29-4fdc-b147-b82421a9eb4f
  spec:
    clusterIP: 10.96.0.1
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-04T06:07:46Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:ports:
            .: {}
            k:{"port":32329,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:sessionAffinityConfig:
            .: {}
            f:clientIP:
              .: {}
              f:timeoutSeconds: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-04T06:07:46Z"
    name: kubia
    namespace: default
    resourceVersion: "522879"
    selfLink: /api/v1/namespaces/default/services/kubia
    uid: 2bd56249-a61a-4cd8-bfc4-52f957136f6d
  spec:
    clusterIP: 10.111.39.217
    ports:
    - port: 32329
      protocol: TCP
      targetPort: 8080
    selector:
      app: kubia
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-06T11:27:01Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-06T11:27:01Z"
    name: kubia-loadbalancer
    namespace: default
    resourceVersion: "646427"
    selfLink: /api/v1/namespaces/default/services/kubia-loadbalancer
    uid: 294c02b4-79ee-4859-b4ae-dfcadd34ea26
  spec:
    clusterIP: 10.109.37.251
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30223
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: kubia
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-22T16:04:23Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-22T16:04:23Z"
    name: kubia-nodeport
    namespace: default
    resourceVersion: "943462"
    selfLink: /api/v1/namespaces/default/services/kubia-nodeport
    uid: ec6320ac-b20c-464d-9ec2-8e4c81d91834
  spec:
    clusterIP: 10.109.48.15
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30123
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: kubia
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-22T16:03:11Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-22T16:03:11Z"
    name: kubia-nodeport-deploy
    namespace: default
    resourceVersion: "943297"
    selfLink: /api/v1/namespaces/default/services/kubia-nodeport-deploy
    uid: d769a3e0-0b4a-4efe-a898-71c3b4b756c2
  spec:
    clusterIP: 10.102.136.48
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30333
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: kubiadeploy
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-17T07:29:59Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-17T07:29:59Z"
    name: kubiaconfigmap-nodeport
    namespace: default
    resourceVersion: "834740"
    selfLink: /api/v1/namespaces/default/services/kubiaconfigmap-nodeport
    uid: 96a80baf-4bad-4a74-bc68-55391dd4800b
  spec:
    clusterIP: 10.107.152.238
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 31313
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: fortune-configmap-volume
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-04-24T13:40:21Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-24T13:40:21Z"
    name: mc1
    namespace: default
    resourceVersion: "366732"
    selfLink: /api/v1/namespaces/default/services/mc1
    uid: 6e0396ec-fbb8-48d5-b658-dba572026265
  spec:
    clusterIP: 10.107.150.188
    externalTrafficPolicy: Cluster
    ports:
    - name: nginx-deployment
      nodePort: 30999
      port: 80
      protocol: TCP
      targetPort: 80
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"nfs-service","namespace":"default"},"spec":{"ports":[{"name":"tcp-2049","port":2049,"protocol":"TCP"},{"name":"udp-111","port":111,"protocol":"UDP"}],"selector":{"role":"nfs"}}}
    creationTimestamp: "2020-05-16T11:07:02Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":111,"protocol":"UDP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":2049,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:role: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T11:07:02Z"
    name: nfs-service
    namespace: default
    resourceVersion: "819324"
    selfLink: /api/v1/namespaces/default/services/nfs-service
    uid: d220a2b0-d538-4ba3-9489-8b5e3b4f1ad0
  spec:
    clusterIP: 10.96.124.8
    ports:
    - name: tcp-2049
      port: 2049
      protocol: TCP
      targetPort: 2049
    - name: udp-111
      port: 111
      protocol: UDP
      targetPort: 111
    selector:
      role: nfs
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-04-22T15:47:26Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-22T15:47:26Z"
    name: nginx
    namespace: default
    resourceVersion: "288114"
    selfLink: /api/v1/namespaces/default/services/nginx
    uid: af819acf-8720-4ed0-8e2f-239963b2d030
  spec:
    clusterIP: 10.109.89.100
    ports:
    - port: 80
      protocol: TCP
      targetPort: 31999
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-04-23T09:44:49Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-23T09:44:49Z"
    name: nginx-deployment
    namespace: default
    resourceVersion: "326679"
    selfLink: /api/v1/namespaces/default/services/nginx-deployment
    uid: 3b3c67c3-0c78-4e28-992f-f2a6c8414630
  spec:
    clusterIP: 10.108.191.113
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 32006
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-04-24T13:26:27Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-24T13:26:27Z"
    name: nginx1
    namespace: default
    resourceVersion: "364835"
    selfLink: /api/v1/namespaces/default/services/nginx1
    uid: 5dd32b02-c362-4e23-8cf0-71d715a97de9
  spec:
    clusterIP: 10.103.88.5
    externalTrafficPolicy: Cluster
    ports:
    - name: nginx-deployment
      nodePort: 31999
      port: 80
      protocol: TCP
      targetPort: 80
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-04-11T04:54:40Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: KubeDNS
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":53,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":53,"protocol":"UDP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9153,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubeadm
      operation: Update
      time: "2020-04-11T04:54:40Z"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "191"
    selfLink: /api/v1/namespaces/kube-system/services/kube-dns
    uid: 09badbd4-490f-43c5-bab0-28882236abfa
  spec:
    clusterIP: 10.96.0.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","kubernetes.io/minikube-addons":"metrics-server","kubernetes.io/minikube-addons-endpoint":"metrics-server","kubernetes.io/name":"Metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"port":443,"protocol":"TCP","targetPort":443}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: "2020-05-15T07:17:54Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      kubernetes.io/minikube-addons: metrics-server
      kubernetes.io/minikube-addons-endpoint: metrics-server
      kubernetes.io/name: Metrics-server
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:kubernetes.io/minikube-addons: {}
            f:kubernetes.io/minikube-addons-endpoint: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-15T07:17:54Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "786364"
    selfLink: /api/v1/namespaces/kube-system/services/metrics-server
    uid: c4aa9421-52cf-40ae-84e2-079357e254a9
  spec:
    clusterIP: 10.110.102.131
    ports:
    - port: 443
      protocol: TCP
      targetPort: 443
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"helm","kubernetes.io/minikube-addons":"helm","name":"tiller"},"name":"tiller-deploy","namespace":"kube-system"},"spec":{"ports":[{"name":"tiller","port":44134,"protocol":"TCP","targetPort":"tiller"}],"selector":{"app":"helm","name":"tiller"},"type":"ClusterIP"}}
    creationTimestamp: "2020-05-15T07:18:21Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app: helm
      kubernetes.io/minikube-addons: helm
      name: tiller
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:app: {}
            f:kubernetes.io/minikube-addons: {}
            f:name: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":44134,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-15T07:18:21Z"
    name: tiller-deploy
    namespace: kube-system
    resourceVersion: "786378"
    selfLink: /api/v1/namespaces/kube-system/services/tiller-deploy
    uid: f49dce2d-c38c-4b99-9de5-d0b87c859f5f
  spec:
    clusterIP: 10.96.75.141
    ports:
    - name: tiller
      port: 44134
      protocol: TCP
      targetPort: tiller
    selector:
      app: helm
      name: tiller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"dashboard-metrics-scraper","kubernetes.io/minikube-addons":"dashboard"},"name":"dashboard-metrics-scraper","namespace":"kubernetes-dashboard"},"spec":{"ports":[{"port":8000,"targetPort":8000}],"selector":{"k8s-app":"dashboard-metrics-scraper"}}}
    creationTimestamp: "2020-04-19T15:17:28Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: dashboard-metrics-scraper
      kubernetes.io/minikube-addons: dashboard
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:k8s-app: {}
            f:kubernetes.io/minikube-addons: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":8000,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-19T15:17:28Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "149540"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/services/dashboard-metrics-scraper
    uid: d4dc5b84-eef2-4cc7-979c-f57cad2b2139
  spec:
    clusterIP: 10.103.231.234
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      k8s-app: dashboard-metrics-scraper
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kubernetes-dashboard","kubernetes.io/minikube-addons":"dashboard"},"name":"kubernetes-dashboard","namespace":"kubernetes-dashboard"},"spec":{"ports":[{"port":80,"targetPort":9090}],"selector":{"k8s-app":"kubernetes-dashboard"}}}
    creationTimestamp: "2020-04-19T15:17:28Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kubernetes-dashboard
      kubernetes.io/minikube-addons: dashboard
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:k8s-app: {}
            f:kubernetes.io/minikube-addons: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-04-19T15:17:28Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "149535"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard
    uid: fbc2bc9c-eca9-4d60-b89f-f97f7f015924
  spec:
    clusterIP: 10.103.205.132
    ports:
    - port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      k8s-app: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-16T06:16:21Z"
    labels:
      app: grafana
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":3000,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T06:16:21Z"
    name: grafana
    namespace: monitoring
    resourceVersion: "796706"
    selfLink: /api/v1/namespaces/monitoring/services/grafana
    uid: 07517014-0371-4afe-a953-871b31009e0a
  spec:
    clusterIP: 10.108.40.244
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 32560
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: grafana
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-16T05:30:08Z"
    labels:
      app: influxdb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":8086,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T05:30:08Z"
    name: influxdb
    namespace: monitoring
    resourceVersion: "792881"
    selfLink: /api/v1/namespaces/monitoring/services/influxdb
    uid: c7470b8a-efdc-4f52-9ba3-1e83597122cd
  spec:
    clusterIP: 10.101.214.138
    ports:
    - port: 8086
      protocol: TCP
      targetPort: 8086
    selector:
      app: influxdb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: alertmanager
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:component: {}
            f:release: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:51Z"
    name: prometheus-alertmanager
    namespace: monitoring
    resourceVersion: "788798"
    selfLink: /api/v1/namespaces/monitoring/services/prometheus-alertmanager
    uid: 644e3fba-b764-42f6-b72c-e9ab61acc6b8
  spec:
    clusterIP: 10.96.223.42
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
    selector:
      app: prometheus
      component: alertmanager
      release: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-05-16T05:03:52Z"
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      helm.sh/chart: kube-state-metrics-2.7.2
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":8080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:51Z"
    name: prometheus-kube-state-metrics
    namespace: monitoring
    resourceVersion: "788812"
    selfLink: /api/v1/namespaces/monitoring/services/prometheus-kube-state-metrics
    uid: 5fe40b17-6f5e-48b7-aa42-ba14d42baab3
  spec:
    clusterIP: 10.109.147.27
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: kube-state-metrics
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-05-16T05:03:51Z"
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: node-exporter
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":9100,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:component: {}
            f:release: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:51Z"
    name: prometheus-node-exporter
    namespace: monitoring
    resourceVersion: "788776"
    selfLink: /api/v1/namespaces/monitoring/services/prometheus-node-exporter
    uid: 5ae41c60-98c0-4f67-8a00-8b28164cc2e3
  spec:
    clusterIP: None
    ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
    selector:
      app: prometheus
      component: node-exporter
      release: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/probe: pushgateway
    creationTimestamp: "2020-05-16T05:03:52Z"
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: pushgateway
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:prometheus.io/probe: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9091,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:component: {}
            f:release: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:51Z"
    name: prometheus-pushgateway
    namespace: monitoring
    resourceVersion: "788805"
    selfLink: /api/v1/namespaces/monitoring/services/prometheus-pushgateway
    uid: 217ec223-a5e2-4975-b391-a41527de0d2f
  spec:
    clusterIP: 10.97.209.195
    ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
    selector:
      app: prometheus
      component: pushgateway
      release: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: server
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:component: {}
            f:release: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:51Z"
    name: prometheus-server
    namespace: monitoring
    resourceVersion: "788791"
    selfLink: /api/v1/namespaces/monitoring/services/prometheus-server
    uid: c8c0333a-9bfd-4113-a0f6-d1d73c08a63b
  spec:
    clusterIP: 10.98.18.163
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus
      component: server
      release: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-05-16T06:14:04Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":8125,"protocol":"UDP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T06:14:04Z"
    name: telegraf
    namespace: monitoring
    resourceVersion: "796380"
    selfLink: /api/v1/namespaces/monitoring/services/telegraf
    uid: c48c5525-6970-469e-9ca5-60a24647edec
  spec:
    clusterIP: 10.99.155.245
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30082
      port: 8125
      protocol: UDP
      targetPort: 8125
    selector:
      app: telegraf
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2020-05-03T09:41:47Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"main"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:disk: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl
      operation: Update
      time: "2020-05-03T09:41:47Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberMisscheduled: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:13Z"
    name: ssd-monitor
    namespace: default
    resourceVersion: "1140833"
    selfLink: /apis/apps/v1/namespaces/default/daemonsets/ssd-monitor
    uid: b00ad561-bee7-471c-9ed0-92dddc0904de
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ssd-monitor
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ssd-monitor
      spec:
        containers:
        - image: luksa/ssd-monitor
          imagePullPolicy: Always
          name: main
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          disk: ssd
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2020-04-11T04:54:40Z"
    generation: 1
    labels:
      k8s-app: kube-proxy
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kube-proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberReady: {}
      manager: kubeadm
      operation: Update
      time: "2020-06-11T13:08:13Z"
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1165888"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy
    uid: 92ec34da-72c0-4a5e-a27b-caafe103901a
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: k8s.gcr.io/kube-proxy:v1.18.0
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: node-exporter
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-node-exporter"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9100,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/proc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/host/sys"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:hostPID: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"proc"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"sys"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberMisscheduled: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:46:49Z"
    name: prometheus-node-exporter
    namespace: monitoring
    resourceVersion: "1051776"
    selfLink: /apis/apps/v1/namespaces/monitoring/daemonsets/prometheus-node-exporter
    uid: 85810446-a712-4e41-b711-a367d9150fac
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: node-exporter
        release: prometheus
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: node-exporter
          heritage: Helm
          release: prometheus
      spec:
        containers:
        - args:
          - --path.procfs=/host/proc
          - --path.sysfs=/host/sys
          image: prom/node-exporter:v0.18.1
          imagePullPolicy: IfNotPresent
          name: prometheus-node-exporter
          ports:
          - containerPort: 9100
            hostPort: 9100
            name: metrics
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/proc
            name: proc
            readOnly: true
          - mountPath: /host/sys
            name: sys
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        hostPID: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: prometheus-node-exporter
        serviceAccountName: prometheus-node-exporter
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /proc
            type: ""
          name: proc
        - hostPath:
            path: /sys
            type: ""
          name: sys
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      kubernetes.io/change-cause: kubectl create --filename=kubia-repset-deploy.yml
        --record=true
    creationTimestamp: "2020-05-23T09:46:53Z"
    generation: 10
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/change-cause: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-24T07:47:13Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:22Z"
    name: kubiadep
    namespace: default
    resourceVersion: "1140917"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kubiadep
    uid: 30ccc399-d6b2-4121-9ab1-f785e6e7c72f
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kubia
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubia
      spec:
        containers:
        - image: luksa/kubia:v4
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2020-05-24T07:50:42Z"
      lastUpdateTime: "2020-05-24T07:51:07Z"
      message: ReplicaSet "kubiadep-799dcb796c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:22Z"
      lastUpdateTime: "2020-06-11T05:54:22Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 10
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-04-23T09:40:55Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"nginx"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-04-23T09:40:55Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:08Z"
    name: nginx-deployment
    namespace: default
    resourceVersion: "1140750"
    selfLink: /apis/apps/v1/namespaces/default/deployments/nginx-deployment
    uid: d07c1a53-01d0-4bc3-9e4a-ae5fc8b5b24f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
      spec:
        containers:
        - image: nginx:1.14.2
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T09:40:55Z"
      lastUpdateTime: "2020-04-23T09:40:57Z"
      message: ReplicaSet "nginx-deployment-6b474476c4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:08Z"
      lastUpdateTime: "2020-06-11T05:54:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: "2020-04-11T04:54:40Z"
    generation: 26
    labels:
      k8s-app: kube-dns
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
      manager: kubeadm
      operation: Update
      time: "2020-04-11T04:54:40Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "1165886"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns
    uid: 9c1c5b9d-25cf-463f-a7f5-3a9bf36d3d5e
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.6.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    conditions:
    - lastTransitionTime: "2020-04-11T04:54:47Z"
      lastUpdateTime: "2020-04-11T04:54:47Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2020-04-11T05:04:48Z"
      lastUpdateTime: "2020-04-11T05:04:48Z"
      message: ReplicaSet "coredns-66bff467f8" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 25
    replicas: 2
    unavailableReplicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"metrics-server","kubernetes.io/minikube-addons":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server"}},"template":{"metadata":{"labels":{"k8s-app":"metrics-server"},"name":"metrics-server"},"spec":{"containers":[{"command":["/metrics-server","--source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true\u0026kubeletPort=10250\u0026insecure=true"],"image":"k8s.gcr.io/metrics-server-amd64:v0.2.1","imagePullPolicy":"Always","name":"metrics-server"}]}}}}
    creationTimestamp: "2020-05-15T07:17:54Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: metrics-server
      kubernetes.io/minikube-addons: metrics-server
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:k8s-app: {}
            f:kubernetes.io/minikube-addons: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-15T07:17:54Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:collisionCount: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T08:44:08Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "1164979"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/metrics-server
    uid: 58ac56de-0ae2-42c0-bbcd-da3e047fb628
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true&kubeletPort=10250&insecure=true
          image: k8s.gcr.io/metrics-server-amd64:v0.2.1
          imagePullPolicy: Always
          name: metrics-server
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    collisionCount: 1
    conditions:
    - lastTransitionTime: "2020-05-16T05:02:34Z"
      lastUpdateTime: "2020-05-16T05:03:06Z"
      message: ReplicaSet "metrics-server-84969c48c8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T08:44:08Z"
      lastUpdateTime: "2020-06-11T08:44:08Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app.kubernetes.io/name":"nginx-ingress-controller","app.kubernetes.io/part-of":"kube-system"},"name":"nginx-ingress-controller","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"addonmanager.kubernetes.io/mode":"Reconcile","app.kubernetes.io/name":"nginx-ingress-controller","app.kubernetes.io/part-of":"kube-system"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"prometheus.io/port":"10254","prometheus.io/scrape":"true"},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app.kubernetes.io/name":"nginx-ingress-controller","app.kubernetes.io/part-of":"kube-system"}},"spec":{"containers":[{"args":["/nginx-ingress-controller","--configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf","--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services","--udp-services-configmap=$(POD_NAMESPACE)/udp-services","--annotations-prefix=nginx.ingress.kubernetes.io","--report-node-internal-ip-address"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"timeoutSeconds":1},"name":"nginx-ingress-controller","ports":[{"containerPort":80,"hostPort":80},{"containerPort":443,"hostPort":443},{"containerPort":18080,"hostPort":18080}],"readinessProbe":{"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"}},"securityContext":{"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"runAsUser":33}}],"serviceAccountName":"nginx-ingress","terminationGracePeriodSeconds":60}}}}
    creationTimestamp: "2020-05-06T11:40:28Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/part-of: kube-system
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:addonmanager.kubernetes.io/mode: {}
              f:app.kubernetes.io/name: {}
              f:app.kubernetes.io/part-of: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:addonmanager.kubernetes.io/mode: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
            f:spec:
              f:containers:
                k:{"name":"nginx-ingress-controller"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                    k:{"containerPort":18080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-06T11:40:28Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-06T11:50:29Z"
    name: nginx-ingress-controller
    namespace: kube-system
    resourceVersion: "649619"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/nginx-ingress-controller
    uid: 5258ca46-efed-4dd9-a478-350e55eaa9b2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        addonmanager.kubernetes.io/mode: Reconcile
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/part-of: kube-system
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          addonmanager.kubernetes.io/mode: Reconcile
          app.kubernetes.io/name: nginx-ingress-controller
          app.kubernetes.io/part-of: kube-system
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --report-node-internal-ip-address
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: nginx-ingress-controller
          ports:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
          - containerPort: 18080
            hostPort: 18080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 33
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nginx-ingress
        serviceAccountName: nginx-ingress
        terminationGracePeriodSeconds: 60
  status:
    conditions:
    - lastTransitionTime: "2020-05-06T11:40:28Z"
      lastUpdateTime: "2020-05-06T11:40:28Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-05-06T11:50:29Z"
      lastUpdateTime: "2020-05-06T11:50:29Z"
      message: ReplicaSet "nginx-ingress-controller-6d57c87cb9" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","app":"helm","kubernetes.io/minikube-addons":"helm","name":"tiller"},"name":"tiller-deploy","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"helm","name":"tiller"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app":"helm","name":"tiller"}},"spec":{"automountServiceAccountToken":true,"containers":[{"env":[{"name":"TILLER_NAMESPACE","value":"kube-system"},{"name":"TILLER_HISTORY_MAX","value":"0"}],"image":"gcr.io/kubernetes-helm/tiller:v2.16.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/liveness","port":44135,"scheme":"HTTP"},"initialDelaySeconds":1,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"tiller","ports":[{"containerPort":44134,"name":"tiller","protocol":"TCP"},{"containerPort":44135,"name":"http","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/readiness","port":44135,"scheme":"HTTP"},"initialDelaySeconds":1,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File"}],"serviceAccount":"tiller","serviceAccountName":"tiller"}}}}
    creationTimestamp: "2020-05-15T07:18:20Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app: helm
      kubernetes.io/minikube-addons: helm
      name: tiller
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:app: {}
            f:kubernetes.io/minikube-addons: {}
            f:name: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-15T07:18:20Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:12Z"
    name: tiller-deploy
    namespace: kube-system
    resourceVersion: "1140819"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/tiller-deploy
    uid: 7fe3921e-6907-459e-b2b0-43ecdf0da3fb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: helm
        name: tiller
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: gcr.io/kubernetes-helm/tiller:v2.16.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-16T05:02:35Z"
      lastUpdateTime: "2020-05-16T05:02:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-05-16T05:02:34Z"
      lastUpdateTime: "2020-05-16T05:05:23Z"
      message: ReplicaSet "tiller-deploy-58bf6f4995" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"dashboard-metrics-scraper","kubernetes.io/minikube-addons":"dashboard"},"name":"dashboard-metrics-scraper","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"dashboard-metrics-scraper"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"runtime/default"},"labels":{"k8s-app":"dashboard-metrics-scraper"}},"spec":{"containers":[{"image":"kubernetesui/metrics-scraper:v1.0.2","livenessProbe":{"httpGet":{"path":"/","port":8000,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"dashboard-metrics-scraper","ports":[{"containerPort":8000,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"beta.kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2020-04-19T15:17:27Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: dashboard-metrics-scraper
      kubernetes.io/minikube-addons: dashboard
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:k8s-app: {}
            f:kubernetes.io/minikube-addons: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-19T15:17:27Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:46:48Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "1051771"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/dashboard-metrics-scraper
    uid: ef22628d-f47b-429e-96bb-a13953c0197d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-19T15:17:27Z"
      lastUpdateTime: "2020-04-19T15:21:38Z"
      message: ReplicaSet "dashboard-metrics-scraper-84bfdf55ff" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-05-31T05:46:48Z"
      lastUpdateTime: "2020-05-31T05:46:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kubernetes-dashboard","kubernetes.io/minikube-addons":"dashboard"},"name":"kubernetes-dashboard","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--namespace=kubernetes-dashboard","--enable-skip-login","--disable-settings-authorizer"],"image":"kubernetesui/dashboard:v2.0.0-rc6","livenessProbe":{"httpGet":{"path":"/","port":9090},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":9090,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"beta.kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2020-04-19T15:17:27Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kubernetes-dashboard
      kubernetes.io/minikube-addons: dashboard
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:k8s-app: {}
            f:kubernetes.io/minikube-addons: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-04-19T15:17:27Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T09:54:14Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "1165410"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/kubernetes-dashboard
    uid: 6a74401b-60b0-4e09-8025-3300121fdfac
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --enable-skip-login
          - --disable-settings-authorizer
          image: kubernetesui/dashboard:v2.0.0-rc6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    conditions:
    - lastTransitionTime: "2020-04-19T15:17:27Z"
      lastUpdateTime: "2020-04-19T15:19:52Z"
      message: ReplicaSet "kubernetes-dashboard-bc446cc64" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T09:54:14Z"
      lastUpdateTime: "2020-06-11T09:54:14Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T06:16:01Z"
    generation: 1
    labels:
      app: grafana
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"grafana"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T06:16:01Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:09Z"
    name: grafana
    namespace: monitoring
    resourceVersion: "1140772"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/grafana
    uid: 4c405108-5372-4c2b-a894-cb749a25ff48
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: grafana-creds
          image: docker.io/grafana/grafana:5.3.2
          imagePullPolicy: IfNotPresent
          name: grafana
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-16T06:49:04Z"
      lastUpdateTime: "2020-05-16T06:49:04Z"
      message: ReplicaSet "grafana-7757d5f45d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:09Z"
      lastUpdateTime: "2020-06-11T05:54:09Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T05:27:38Z"
    generation: 1
    labels:
      app: influxdb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"influxdb"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/influxdb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"var-lib-influxdb"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T05:27:38Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:37:39Z"
    name: influxdb
    namespace: monitoring
    resourceVersion: "793924"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/influxdb
    uid: 1f50945e-e6e6-4d21-b135-7a0c6875b829
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: influxdb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: influxdb
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: influxdb-creds
          image: docker.io/influxdb:1.6.4
          imagePullPolicy: IfNotPresent
          name: influxdb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/influxdb
            name: var-lib-influxdb
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: var-lib-influxdb
          persistentVolumeClaim:
            claimName: influxdb-pvc
  status:
    conditions:
    - lastTransitionTime: "2020-05-16T05:27:38Z"
      lastUpdateTime: "2020-05-16T05:27:38Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2020-05-16T05:37:39Z"
      lastUpdateTime: "2020-05-16T05:37:39Z"
      message: ReplicaSet "influxdb-7f694df996" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: alertmanager
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-alertmanager"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-alertmanager-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:23Z"
    name: prometheus-alertmanager
    namespace: monitoring
    resourceVersion: "1140932"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prometheus-alertmanager
    uid: a6433dce-bc48-4b7a-a60f-7a1a181f9889
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: alertmanager
        release: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: alertmanager
          heritage: Helm
          release: prometheus
      spec:
        containers:
        - args:
          - --config.file=/etc/config/alertmanager.yml
          - --storage.path=/data
          - --cluster.advertise-address=$(POD_IP):6783
          - --web.external-url=http://localhost:9093
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: prom/alertmanager:v0.20.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager
          ports:
          - containerPort: 9093
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9093
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9093/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-alertmanager
        serviceAccountName: prometheus-alertmanager
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-alertmanager
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-alertmanager
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-16T05:03:52Z"
      lastUpdateTime: "2020-05-16T05:08:28Z"
      message: ReplicaSet "prometheus-alertmanager-69db67d668" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:23Z"
      lastUpdateTime: "2020-06-11T05:54:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      helm.sh/chart: kube-state-metrics-2.7.2
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
            f:spec:
              f:containers:
                k:{"name":"kube-state-metrics"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:13:54Z"
    name: prometheus-kube-state-metrics
    namespace: monitoring
    resourceVersion: "790598"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prometheus-kube-state-metrics
    uid: e98603f5-8ab3-4ed3-a6a5-8a67abeab013
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: kube-state-metrics
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: prometheus
          app.kubernetes.io/name: kube-state-metrics
      spec:
        containers:
        - args:
          - --collectors=certificatesigningrequests
          - --collectors=configmaps
          - --collectors=cronjobs
          - --collectors=daemonsets
          - --collectors=deployments
          - --collectors=endpoints
          - --collectors=horizontalpodautoscalers
          - --collectors=ingresses
          - --collectors=jobs
          - --collectors=limitranges
          - --collectors=namespaces
          - --collectors=nodes
          - --collectors=persistentvolumeclaims
          - --collectors=persistentvolumes
          - --collectors=poddisruptionbudgets
          - --collectors=pods
          - --collectors=replicasets
          - --collectors=replicationcontrollers
          - --collectors=resourcequotas
          - --collectors=secrets
          - --collectors=services
          - --collectors=statefulsets
          - --collectors=storageclasses
          image: quay.io/coreos/kube-state-metrics:v1.9.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
        serviceAccount: prometheus-kube-state-metrics
        serviceAccountName: prometheus-kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2020-05-16T05:03:53Z"
      lastUpdateTime: "2020-05-16T05:03:53Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2020-05-16T05:13:54Z"
      lastUpdateTime: "2020-05-16T05:13:54Z"
      message: ReplicaSet "prometheus-kube-state-metrics-55c864f698" has timed out
        progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: pushgateway
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-pushgateway"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:15Z"
    name: prometheus-pushgateway
    namespace: monitoring
    resourceVersion: "1140858"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prometheus-pushgateway
    uid: 5ad842f2-d6c9-4825-8571-e2b882bd36c9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: pushgateway
        release: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: pushgateway
          heritage: Helm
          release: prometheus
      spec:
        containers:
        - image: prom/pushgateway:v1.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-pushgateway
          ports:
          - containerPort: 9091
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-pushgateway
        serviceAccountName: prometheus-pushgateway
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-16T05:03:52Z"
      lastUpdateTime: "2020-05-16T05:06:52Z"
      message: ReplicaSet "prometheus-pushgateway-fd4679c5f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:15Z"
      lastUpdateTime: "2020-06-11T05:54:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.2.3
      component: server
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-server-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2020-05-16T05:03:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:33Z"
    name: prometheus-server
    namespace: monitoring
    resourceVersion: "1141027"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prometheus-server
    uid: 9223a49f-d522-41b7-8390-1a7a86055e5a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: server
        release: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: server
          heritage: Helm
          release: prometheus
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.18.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-server
        serviceAccountName: prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-server
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-server
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-16T05:03:52Z"
      lastUpdateTime: "2020-05-16T05:12:38Z"
      message: ReplicaSet "prometheus-server-d8547496d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-06-11T05:54:33Z"
      lastUpdateTime: "2020-06-11T05:54:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T06:13:11Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"telegraf"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/telegraf/telegraf.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"telegraf-config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
      manager: kubectl
      operation: Update
      time: "2020-05-16T06:13:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T06:23:12Z"
    name: telegraf
    namespace: monitoring
    resourceVersion: "797695"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/telegraf
    uid: 96855c9d-1832-4554-bd3f-bf421cec2cbe
  spec:
    minReadySeconds: 5
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: telegraf
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: telegraf
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: telegraf-secrets
          image: telegraf:1.10.0
          imagePullPolicy: IfNotPresent
          name: telegraf
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/telegraf/telegraf.conf
            name: telegraf-config-volume
            readOnly: true
            subPath: telegraf.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: telegraf-config
          name: telegraf-config-volume
  status:
    conditions:
    - lastTransitionTime: "2020-05-16T06:13:11Z"
      lastUpdateTime: "2020-05-16T06:13:11Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2020-05-16T06:23:12Z"
      lastUpdateTime: "2020-05-16T06:23:12Z"
      message: ReplicaSet "telegraf-794bc96857" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      kubernetes.io/change-cause: kubectl create --filename=kubia-repset-deploy.yml
        --record=true
    creationTimestamp: "2020-05-24T06:49:15Z"
    generation: 12
    labels:
      app: kubia
      pod-template-hash: 5bfcfb498b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:deployment.kubernetes.io/revision-history: {}
            f:kubernetes.io/change-cause: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"30ccc399-d6b2-4121-9ab1-f785e6e7c72f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:minReadySeconds: {}
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-24T06:58:21Z"
    name: kubiadep-5bfcfb498b
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubiadep
      uid: 30ccc399-d6b2-4121-9ab1-f785e6e7c72f
    resourceVersion: "997462"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/kubiadep-5bfcfb498b
    uid: 8b4485a1-0414-4464-b84b-da0bb4421050
  spec:
    minReadySeconds: 10
    replicas: 0
    selector:
      matchLabels:
        app: kubia
        pod-template-hash: 5bfcfb498b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubia
          pod-template-hash: 5bfcfb498b
      spec:
        containers:
        - image: luksa/kubia:v3
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 12
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: 2,4
      kubernetes.io/change-cause: kubectl create --filename=kubia-repset-deploy.yml
        --record=true
    creationTimestamp: "2020-05-24T06:42:28Z"
    generation: 18
    labels:
      app: kubia
      pod-template-hash: 667c5574f
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:deployment.kubernetes.io/revision-history: {}
            f:kubernetes.io/change-cause: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"30ccc399-d6b2-4121-9ab1-f785e6e7c72f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:minReadySeconds: {}
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-24T07:51:07Z"
    name: kubiadep-667c5574f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubiadep
      uid: 30ccc399-d6b2-4121-9ab1-f785e6e7c72f
    resourceVersion: "1004950"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/kubiadep-667c5574f
    uid: f0520ebf-8501-4154-9f81-24842527c17a
  spec:
    minReadySeconds: 10
    replicas: 0
    selector:
      matchLabels:
        app: kubia
        pod-template-hash: 667c5574f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubia
          pod-template-hash: 667c5574f
      spec:
        containers:
        - image: luksa/kubia:v2
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 18
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
      kubernetes.io/change-cause: kubectl create --filename=kubia-repset-deploy.yml
        --record=true
    creationTimestamp: "2020-05-23T09:46:53Z"
    generation: 5
    labels:
      app: kubia
      pod-template-hash: 77b8dd4c6
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:kubernetes.io/change-cause: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"30ccc399-d6b2-4121-9ab1-f785e6e7c72f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:minReadySeconds: {}
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-24T06:45:03Z"
    name: kubiadep-77b8dd4c6
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubiadep
      uid: 30ccc399-d6b2-4121-9ab1-f785e6e7c72f
    resourceVersion: "995086"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/kubiadep-77b8dd4c6
    uid: 24018e75-206c-4761-a7f7-c0cba836deae
  spec:
    minReadySeconds: 10
    replicas: 0
    selector:
      matchLabels:
        app: kubia
        pod-template-hash: 77b8dd4c6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubia
          pod-template-hash: 77b8dd4c6
      spec:
        containers:
        - image: luksa/kubia:v1
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "7"
      kubernetes.io/change-cause: kubectl create --filename=kubia-repset-deploy.yml
        --record=true
    creationTimestamp: "2020-05-24T07:46:55Z"
    generation: 3
    labels:
      app: kubia
      pod-template-hash: 799dcb796c
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:kubernetes.io/change-cause: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"30ccc399-d6b2-4121-9ab1-f785e6e7c72f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:minReadySeconds: {}
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nodejs"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:22Z"
    name: kubiadep-799dcb796c
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubiadep
      uid: 30ccc399-d6b2-4121-9ab1-f785e6e7c72f
    resourceVersion: "1140916"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/kubiadep-799dcb796c
    uid: 2893dd0a-469c-4cf4-b995-510509dfd3bb
  spec:
    minReadySeconds: 10
    replicas: 3
    selector:
      matchLabels:
        app: kubia
        pod-template-hash: 799dcb796c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubia
          pod-template-hash: 799dcb796c
      spec:
        containers:
        - image: luksa/kubia:v4
          imagePullPolicy: IfNotPresent
          name: nodejs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-04-23T09:40:55Z"
    generation: 1
    labels:
      app: nginx
      pod-template-hash: 6b474476c4
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d07c1a53-01d0-4bc3-9e4a-ae5fc8b5b24f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nginx"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:08Z"
    name: nginx-deployment-6b474476c4
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deployment
      uid: d07c1a53-01d0-4bc3-9e4a-ae5fc8b5b24f
    resourceVersion: "1140741"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/nginx-deployment-6b474476c4
    uid: 3b8b1b1c-67f7-4d4e-9dfc-1d1b294373da
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
        pod-template-hash: 6b474476c4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
          pod-template-hash: 6b474476c4
      spec:
        containers:
        - image: nginx:1.14.2
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-04-11T04:54:47Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: 66bff467f8
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9c1c5b9d-25cf-463f-a7f5-3a9bf36d3d5e"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-11T04:54:47Z"
    name: coredns-66bff467f8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 9c1c5b9d-25cf-463f-a7f5-3a9bf36d3d5e
    resourceVersion: "366"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/coredns-66bff467f8
    uid: 5451b3bb-eccf-49f4-ab44-c1eef46c443b
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 66bff467f8
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 66bff467f8
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.6.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    fullyLabeledReplicas: 2
    observedGeneration: 1
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T05:02:34Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 84969c48c8
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"58ac56de-0ae2-42c0-bbcd-da3e047fb628"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T08:44:07Z"
    name: metrics-server-84969c48c8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 58ac56de-0ae2-42c0-bbcd-da3e047fb628
    resourceVersion: "1164977"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-84969c48c8
    uid: e49beb8c-d360-449d-8d84-f08c62aa43a8
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 84969c48c8
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 84969c48c8
        name: metrics-server
      spec:
        containers:
        - command:
          - /metrics-server
          - --source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true&kubeletPort=10250&insecure=true
          image: k8s.gcr.io/metrics-server-amd64:v0.2.1
          imagePullPolicy: Always
          name: metrics-server
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-06T11:40:28Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/part-of: kube-system
      pod-template-hash: 6d57c87cb9
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:addonmanager.kubernetes.io/mode: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5258ca46-efed-4dd9-a478-350e55eaa9b2"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:addonmanager.kubernetes.io/mode: {}
              f:app.kubernetes.io/name: {}
              f:app.kubernetes.io/part-of: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:addonmanager.kubernetes.io/mode: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"nginx-ingress-controller"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                    k:{"containerPort":18080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-06T11:40:28Z"
    name: nginx-ingress-controller-6d57c87cb9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-ingress-controller
      uid: 5258ca46-efed-4dd9-a478-350e55eaa9b2
    resourceVersion: "648251"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/nginx-ingress-controller-6d57c87cb9
    uid: 46fefa1c-bf9b-497e-a564-6e221f890491
  spec:
    replicas: 1
    selector:
      matchLabels:
        addonmanager.kubernetes.io/mode: Reconcile
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/part-of: kube-system
        pod-template-hash: 6d57c87cb9
    template:
      metadata:
        annotations:
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          addonmanager.kubernetes.io/mode: Reconcile
          app.kubernetes.io/name: nginx-ingress-controller
          app.kubernetes.io/part-of: kube-system
          pod-template-hash: 6d57c87cb9
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --report-node-internal-ip-address
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: nginx-ingress-controller
          ports:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
          - containerPort: 18080
            hostPort: 18080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 33
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nginx-ingress
        serviceAccountName: nginx-ingress
        terminationGracePeriodSeconds: 60
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T05:02:34Z"
    generation: 1
    labels:
      app: helm
      name: tiller
      pod-template-hash: 58bf6f4995
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7fe3921e-6907-459e-b2b0-43ecdf0da3fb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:12Z"
    name: tiller-deploy-58bf6f4995
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tiller-deploy
      uid: 7fe3921e-6907-459e-b2b0-43ecdf0da3fb
    resourceVersion: "1140816"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/tiller-deploy-58bf6f4995
    uid: cedf3038-1151-48e9-b04d-3d67cf80b21c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: helm
        name: tiller
        pod-template-hash: 58bf6f4995
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
          pod-template-hash: 58bf6f4995
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: gcr.io/kubernetes-helm/tiller:v2.16.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-04-19T15:17:27Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 84bfdf55ff
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ef22628d-f47b-429e-96bb-a13953c0197d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-31T05:46:48Z"
    name: dashboard-metrics-scraper-84bfdf55ff
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dashboard-metrics-scraper
      uid: ef22628d-f47b-429e-96bb-a13953c0197d
    resourceVersion: "1051770"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/replicasets/dashboard-metrics-scraper-84bfdf55ff
    uid: ca194d02-0357-45b0-ad8a-82aa2e225956
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
        pod-template-hash: 84bfdf55ff
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
          pod-template-hash: 84bfdf55ff
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-04-19T15:17:27Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: bc446cc64
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6a74401b-60b0-4e09-8025-3300121fdfac"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:beta.kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T09:54:13Z"
    name: kubernetes-dashboard-bc446cc64
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: 6a74401b-60b0-4e09-8025-3300121fdfac
    resourceVersion: "1165407"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/replicasets/kubernetes-dashboard-bc446cc64
    uid: 148a6897-c09d-492f-8d04-171bd49817ed
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: bc446cc64
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: bc446cc64
      spec:
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --enable-skip-login
          - --disable-settings-authorizer
          image: kubernetesui/dashboard:v2.0.0-rc6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T06:16:01Z"
    generation: 1
    labels:
      app: grafana
      pod-template-hash: 7757d5f45d
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4c405108-5372-4c2b-a894-cb749a25ff48"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"grafana"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:09Z"
    name: grafana-7757d5f45d
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: grafana
      uid: 4c405108-5372-4c2b-a894-cb749a25ff48
    resourceVersion: "1140770"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/grafana-7757d5f45d
    uid: 35f80e52-f1ac-4bf7-81bd-a182ce9a7bc4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: grafana
        pod-template-hash: 7757d5f45d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana
          pod-template-hash: 7757d5f45d
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: grafana-creds
          image: docker.io/grafana/grafana:5.3.2
          imagePullPolicy: IfNotPresent
          name: grafana
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T05:27:38Z"
    generation: 1
    labels:
      app: influxdb
      pod-template-hash: 7f694df996
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1f50945e-e6e6-4d21-b135-7a0c6875b829"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"influxdb"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/influxdb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"var-lib-influxdb"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:27:38Z"
    name: influxdb-7f694df996
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: influxdb
      uid: 1f50945e-e6e6-4d21-b135-7a0c6875b829
    resourceVersion: "792530"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/influxdb-7f694df996
    uid: cd780be2-e0d7-45fd-8146-2330a3ee705b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: influxdb
        pod-template-hash: 7f694df996
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: influxdb
          pod-template-hash: 7f694df996
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: influxdb-creds
          image: docker.io/influxdb:1.6.4
          imagePullPolicy: IfNotPresent
          name: influxdb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/influxdb
            name: var-lib-influxdb
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: var-lib-influxdb
          persistentVolumeClaim:
            claimName: influxdb-pvc
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: alertmanager
      heritage: Helm
      pod-template-hash: 69db67d668
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a6433dce-bc48-4b7a-a60f-7a1a181f9889"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:pod-template-hash: {}
              f:release: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-alertmanager"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-alertmanager-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:23Z"
    name: prometheus-alertmanager-69db67d668
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: prometheus-alertmanager
      uid: a6433dce-bc48-4b7a-a60f-7a1a181f9889
    resourceVersion: "1140929"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/prometheus-alertmanager-69db67d668
    uid: dd398a2f-f611-425b-8525-54333af41024
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
        component: alertmanager
        pod-template-hash: 69db67d668
        release: prometheus
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: alertmanager
          heritage: Helm
          pod-template-hash: 69db67d668
          release: prometheus
      spec:
        containers:
        - args:
          - --config.file=/etc/config/alertmanager.yml
          - --storage.path=/data
          - --cluster.advertise-address=$(POD_IP):6783
          - --web.external-url=http://localhost:9093
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: prom/alertmanager:v0.20.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager
          ports:
          - containerPort: 9093
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9093
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9093/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-alertmanager
        serviceAccountName: prometheus-alertmanager
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-alertmanager
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-alertmanager
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: kube-state-metrics
      pod-template-hash: 55c864f698
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e98603f5-8ab3-4ed3-a6a5-8a67abeab013"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/name: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"kube-state-metrics"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T05:03:53Z"
    name: prometheus-kube-state-metrics-55c864f698
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: prometheus-kube-state-metrics
      uid: e98603f5-8ab3-4ed3-a6a5-8a67abeab013
    resourceVersion: "788862"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/prometheus-kube-state-metrics-55c864f698
    uid: d606ea37-cfde-4085-b946-bcdae5c3db4e
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: kube-state-metrics
        pod-template-hash: 55c864f698
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: prometheus
          app.kubernetes.io/name: kube-state-metrics
          pod-template-hash: 55c864f698
      spec:
        containers:
        - args:
          - --collectors=certificatesigningrequests
          - --collectors=configmaps
          - --collectors=cronjobs
          - --collectors=daemonsets
          - --collectors=deployments
          - --collectors=endpoints
          - --collectors=horizontalpodautoscalers
          - --collectors=ingresses
          - --collectors=jobs
          - --collectors=limitranges
          - --collectors=namespaces
          - --collectors=nodes
          - --collectors=persistentvolumeclaims
          - --collectors=persistentvolumes
          - --collectors=poddisruptionbudgets
          - --collectors=pods
          - --collectors=replicasets
          - --collectors=replicationcontrollers
          - --collectors=resourcequotas
          - --collectors=secrets
          - --collectors=services
          - --collectors=statefulsets
          - --collectors=storageclasses
          image: quay.io/coreos/kube-state-metrics:v1.9.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
        serviceAccount: prometheus-kube-state-metrics
        serviceAccountName: prometheus-kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: pushgateway
      heritage: Helm
      pod-template-hash: fd4679c5f
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5ad842f2-d6c9-4825-8571-e2b882bd36c9"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:pod-template-hash: {}
              f:release: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-pushgateway"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:15Z"
    name: prometheus-pushgateway-fd4679c5f
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: prometheus-pushgateway
      uid: 5ad842f2-d6c9-4825-8571-e2b882bd36c9
    resourceVersion: "1140857"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/prometheus-pushgateway-fd4679c5f
    uid: 9adca967-6b66-4286-94ab-e9ec2ffa4d80
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
        component: pushgateway
        pod-template-hash: fd4679c5f
        release: prometheus
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: pushgateway
          heritage: Helm
          pod-template-hash: fd4679c5f
          release: prometheus
      spec:
        containers:
        - image: prom/pushgateway:v1.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-pushgateway
          ports:
          - containerPort: 9091
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-pushgateway
        serviceAccountName: prometheus-pushgateway
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2020-05-16T05:03:52Z"
    generation: 1
    labels:
      app: prometheus
      chart: prometheus-11.2.3
      component: server
      heritage: Helm
      pod-template-hash: d8547496d
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9223a49f-d522-41b7-8390-1a7a86055e5a"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:pod-template-hash: {}
              f:release: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-server-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-06-11T05:54:33Z"
    name: prometheus-server-d8547496d
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: prometheus-server
      uid: 9223a49f-d522-41b7-8390-1a7a86055e5a
    resourceVersion: "1141024"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/prometheus-server-d8547496d
    uid: a5bdb33b-b9fc-40b4-8358-0ea957a24e79
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
        component: server
        pod-template-hash: d8547496d
        release: prometheus
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.2.3
          component: server
          heritage: Helm
          pod-template-hash: d8547496d
          release: prometheus
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.18.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-server
        serviceAccountName: prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-server
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-server
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-16T06:13:11Z"
    generation: 1
    labels:
      app: telegraf
      pod-template-hash: 794bc96857
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"96855c9d-1832-4554-bd3f-bf421cec2cbe"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:minReadySeconds: {}
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"telegraf"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/telegraf/telegraf.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"telegraf-config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-16T06:13:11Z"
    name: telegraf-794bc96857
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: telegraf
      uid: 96855c9d-1832-4554-bd3f-bf421cec2cbe
    resourceVersion: "796252"
    selfLink: /apis/apps/v1/namespaces/monitoring/replicasets/telegraf-794bc96857
    uid: 30903849-3441-4350-9dce-72e8e2be3ca1
  spec:
    minReadySeconds: 5
    replicas: 1
    selector:
      matchLabels:
        app: telegraf
        pod-template-hash: 794bc96857
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: telegraf
          pod-template-hash: 794bc96857
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: telegraf-secrets
          image: telegraf:1.10.0
          imagePullPolicy: IfNotPresent
          name: telegraf
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/telegraf/telegraf.conf
            name: telegraf-config-volume
            readOnly: true
            subPath: telegraf.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: telegraf-config
          name: telegraf-config-volume
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2020-05-03T10:18:44Z"
    labels:
      app: batch-job
      controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
      job-name: batch-job
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:backoffLimit: {}
          f:completions: {}
          f:parallelism: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"main"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl
      operation: Update
      time: "2020-05-03T10:18:44Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions:
            .: {}
            k:{"type":"Complete"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:startTime: {}
          f:succeeded: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-05-03T10:25:05Z"
    name: batch-job
    namespace: default
    resourceVersion: "488451"
    selfLink: /apis/batch/v1/namespaces/default/jobs/batch-job
    uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
  spec:
    backoffLimit: 6
    completions: 5
    parallelism: 2
    selector:
      matchLabels:
        controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: batch-job
          controller-uid: f34f2a3e-1cc8-45ad-a2bf-eaae0ba4600d
          job-name: batch-job
      spec:
        containers:
        - image: luksa/batch-job
          imagePullPolicy: Always
          name: main
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2020-05-03T10:25:05Z"
    conditions:
    - lastProbeTime: "2020-05-03T10:25:05Z"
      lastTransitionTime: "2020-05-03T10:25:05Z"
      status: "True"
      type: Complete
    startTime: "2020-05-03T10:18:44Z"
    succeeded: 5
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
